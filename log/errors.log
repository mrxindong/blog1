[2018-04-06T19:18:26.979] [ERROR] userDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 's.name' in 'where clause'
    at Query.Sequence._packetToError (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/protocol/sequences/Sequence.js:52:14)
    at Query.ErrorPacket (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/protocol/sequences/Query.js:77:18)
    at Protocol._parsePacket (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/protocol/Protocol.js:279:23)
    at Parser.write (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/protocol/Parser.js:76:12)
    at Protocol.write (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/protocol/Protocol.js:39:16)
    at Socket.<anonymous> (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/protocol/Protocol.js:145:48)
    at PoolConnection.query (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/mysql/lib/Connection.js:208:25)
    at /Users/mrxindong/Documents/nodejs/myBlog/node_modules/promise-mysql/lib/helper.js:16:24
    at Promise._execute (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/promise-mysql/node_modules/bluebird/js/release/debuggability.js:303:9)
    at Promise._resolveFromExecutor (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/promise-mysql/node_modules/bluebird/js/release/promise.js:483:18)
    at new Promise (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/promise-mysql/node_modules/bluebird/js/release/promise.js:79:10)
    at PoolConnection.promiseCallback (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/promise-mysql/lib/helper.js:6:10)
    at poolConnection.connection.query (/Users/mrxindong/Documents/nodejs/myBlog/node_modules/promise-mysql/lib/connection.js:64:28)
    at Object.aQuery (/Users/mrxindong/Documents/nodejs/myBlog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'s.name\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select * from users ss where s.name=\'dd\' and s.password=\'H63bjcChOp95emmnC1MYmQ==\' and  s.flag=1 ' }
[2018-04-08T17:04:39.792] [ERROR] userDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from users s where s.username=\'admin\' and s.password=\'IEdv0tn+Q5r4w95+2J9EDg==\' and ' }
[2018-04-08T17:06:24.655] [ERROR] userDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from users s where s.username=\'admin\' and s.password=\'IEdv0tn+Q5r4w95+2J9EDg==\' and ' }
[2018-04-08T17:18:24.762] [ERROR] userDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.find (d:\H5\Myblog\nodejs\myblog\service\userDao.js:18:38)
    at Users.login (d:\H5\Myblog\nodejs\myblog\controller\userContro.js:37:34)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-04-08T18:25:11.743] [ERROR] helper - { Error: ER_WRONG_VALUE_COUNT_ON_ROW: Column count doesn't match value count at row 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_WRONG_VALUE_COUNT_ON_ROW',
  errno: 1136,
  sqlMessage: 'Column count doesn\'t match value count at row 1',
  sqlState: '21S01',
  index: 0,
  sql: 'insert into article values (\'内容\',\'卫栖梧二群翁人 \',\'去玩儿群翁二群翁二去玩儿若若若若若若若若若若\',1,\'0\',NOW()) ' }
[2018-04-09T13:11:35.222] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'createtime BETWEEN 'undefined00:00:00' and 'undefined23:59:59' order by id desc' at line 1
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'createtime BETWEEN \'undefined00:00:00\' and \'undefined23:59:59\' order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from article  where userid=1 and title like \'%NULL%\'createtime BETWEEN \'undefined00:00:00\' and \'undefined23:59:59\' order by id desc' }
[2018-04-09T13:13:35.584] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'createtime BETWEEN 'undefined00:00:00' and 'undefined23:59:59' order by id desc' at line 1
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'createtime BETWEEN \'undefined00:00:00\' and \'undefined23:59:59\' order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from article  where userid=1 and title like \'%NULL%\'createtime BETWEEN \'undefined00:00:00\' and \'undefined23:59:59\' order by id desc' }
[2018-04-09T13:14:47.900] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'createtime BETWEEN 'undefined00:00:00' and 'undefined23:59:59' order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'createtime BETWEEN \'undefined00:00:00\' and \'undefined23:59:59\' order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from article  where userid=1 and title like \'%NULL%\'createtime BETWEEN \'undefined00:00:00\' and \'undefined23:59:59\' order by id desc' }
[2018-04-09T13:43:55.150] [ERROR] articleDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.getbloglist (d:\H5\Myblog\nodejs\myblog\service\articleDao.js:60:38)
    at Article.getbloglist (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:70:37)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-04-09T20:29:08.136] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:32:12.404] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:33:23.813] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:35:12.164] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:35:29.954] [ERROR] tagDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.getblogtypelist (d:\H5\Myblog\nodejs\myblog\service\tagDao.js:47:38)
    at Article.typelist (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:171:33)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-04-09T20:35:41.736] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:36:11.651] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:36:11.659] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:36:37.607] [ERROR] tagDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.getblogtypelistcount (d:\H5\Myblog\nodejs\myblog\service\tagDao.js:63:38)
    at Article.typelist (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:172:39)
    at <anonymous>
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-04-09T20:37:35.413] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:42:26.952] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'NULL order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'NULL order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit NaN,NULL order by id desc' }
[2018-04-09T20:42:29.137] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''9' order by id desc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\'9\' order by id desc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where 1=1   limit 0,\'9\' order by id desc' }
[2018-04-10T07:50:09.217] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'大标题\',\'描述\',\'完全二去玩儿群翁\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T07:51:20.283] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'大标题\',\'描述\',\'完全二去玩儿群翁\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T07:52:03.474] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'大标题\',\'描述\',\'完全二去玩儿群翁\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T07:54:58.237] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'大标题\',\'描述\',\'完全二去玩儿群翁\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T07:55:59.315] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'大标题\',\'描述\',\'完全二去玩儿群翁\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T07:58:26.189] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'1\',\'1\',\'1\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T08:00:19.554] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'select last_insert_id()' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'select last_insert_id()\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'insert into article values (NULL,\'1\',\'2\',\'3\',1,\'0\',NOW());select last_insert_id();' }
[2018-04-10T09:46:45.392] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'tagid' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'tagid\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where userid=1 and tagid=\'8\'  order by id desc limit 0,9' }
[2018-04-10T09:46:45.434] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'tagid' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'tagid\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and tagid=\'8\'' }
[2018-04-10T09:47:23.463] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'tagid' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'tagid\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where userid=1 and tagid=\'8\'  order by id desc limit 0,9' }
[2018-04-10T09:47:23.483] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'tagid' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'tagid\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and tagid=\'8\'' }
[2018-04-10T09:50:19.847] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'tagid' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'tagid\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where userid=1 and tagid=8  order by id desc limit 0,9' }
[2018-04-10T09:50:19.914] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'tagid' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'tagid\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and tagid=8' }
[2018-04-10T09:53:22.163] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=8' }
[2018-04-10T09:57:21.426] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T09:58:45.350] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=8' }
[2018-04-10T09:59:31.235] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T09:59:54.877] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=8' }
[2018-04-10T10:00:20.267] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:01:58.660] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=8' }
[2018-04-10T10:03:19.565] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:06:41.986] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=8' }
[2018-04-10T10:08:04.705] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:09:17.405] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:10:22.902] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:10:51.104] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=8' }
[2018-04-10T10:12:16.157] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:12:48.729] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:13:36.312] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:14:45.669] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:15:20.758] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:15:22.070] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T10:16:14.786] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'ta.tag_id' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'ta.tag_id\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(id) as count from article  where userid=1 and ta.tag_id=12' }
[2018-04-10T11:46:17.965] [ERROR] helper - { Error: ER_DATA_TOO_LONG: Data too long for column 'content' at row 1
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_DATA_TOO_LONG',
  errno: 1406,
  sqlMessage: 'Data too long for column \'content\' at row 1',
  sqlState: '22001',
  index: 0,
  sql: 'insert into article values (NULL,\'从mysql中查最后一条记录\',\'首先要确定什么是最后一条。\\n是编辑时间最新的为最后一条，还是某个字段数字最大的未最后一条。\\n比如以时间最大为最后一条，则将符合条件的资料都筛选出来，再按时间排序，再取一笔资料。\\nSQL如下：\\nselect a,b from table where a>\\\'某个时间\\\' order by a desc limit 1\\n(上面SQL中a为时间)。\',\'本章通过演示如何使用mysql客户程序创造和使用一个简单的数据库，提供一个MySQL的入门教程。mysql（有时称为“终端监视器”或只是“监视”）是一个交互式程序，允许你连接一个MySQL服务器，运行查询并察看结果。mysql可以用于批模式：你预先把查询放在一个文件中，然后告诉mysql执行文件的内容。本章将介绍使用mysql的两个方法。\\n\\n要想查看由mysql提供的选择项目表，可以用--help选项来调用：\\n\\nshell> mysql --help\\n本章假定mysql已经被安装在你的机器上，并且有一个MySQL服务器可以连接。否则，请联络MySQL管理员。（如果你是管理员，则需要查阅本手册的其它章节，例如第5章：数据库管理。）\\n\\n本章描述建立和使用一个数据库的全过程。如果你仅仅对访问一个已经存在的数据库感兴趣，可以跳过描述怎样创建数据库及它所包含的表的章节。\\n\\n由于本章是一个教程，省略了许多细节。关于这里所涉及的主题的详细信息，请查阅本手册的相关章节。\\n\\n3.1. 连接与断开服务器\\n为了连接服务器，当调用mysql时，通常需要提供一个MySQL用户名并且很可能需要一个 密码。如果服务器运行在登录服务器之外的其它机器上，还需要指定主机名。联系管理员以找出进行连接所使用的参数 (即，连接的主机、用户名和使用的密码)。知道正确的参数后，可以按照以下方式进行连接：\\nshell> mysql -h host -u user -p\\nEnter password: ********\\nhost和user分别代表MySQL服务器运行的主机名和MySQL账户用户名。设置时替换为正确的值。******** 代表你的密码；当mysql显示Enter password:提示时输入它。\\n\\n如果有效，你应该看见mysql>提示符后的一些介绍信息：\\n\\nshell> mysql -h host -u user -p\\nEnter password: ********\\nWelcome to the MySQL monitor.  Commands end with ; or /g.\\nYour MySQL connection id is 25338 to server version: 5.1.2-alpha-standard\\n \\nType \\\'help;\\\' or \\\'/h\\\' for help. Type \\\'/c\\\' to clear the buffer.\\n \\nmysql>\\nmysql> 提示符告诉你mysql准备为你输入命令。\\n\\n一些MySQL安装允许用户以匿名（未命名）用户连接到本地主机上运行的服务器。如果你的机器是这种情况，你应该能不带任何选项地调用mysql与该服务器连接：\\n\\nshell> mysql\\n成功地连接后，可以在mysql>提示下输入QUIT (或/q)随时退出：\\n\\nmysql> QUIT\\nBye\\n在Unix中，也可以按control-D键断开服务器。\\n\\n在下列章节的大多数例子都假设你连接到了服务器。由mysql>提示指明。\\n\\n3.2. 输入查询\\n确保你连接上了服务器，如在先前的章节讨论的。连接上服务器并布代表选择了任何数据库，但这样就可以了。知道关于如何查询的基本知识，比马上跳至创建表、给他们装载数据并且从他们检索数据更重要。本节描述输入命令的基本原则，使用几个查询，你能尝试了解mysql是如何工作的。\\n\\n这是一个简单的命令，要求服务器告诉它的版本号和当前日期。在mysql>提示输入如下命令并按回车键：\\n\\nmysql> SELECT VERSION(), CURRENT_DATE;\\n ----------------- -------------- \\n| VERSION()       | CURRENT_DATE |\\n ----------------- -------------- \\n| 5.1.2-alpha-log | 2005-10-11   |\\n ----------------- -------------- \\n1 row in set (0.01 sec)\\nmysql>\\n这询问说明mysql的几个方面:\\n\\n·         一个命令通常由SQL语句组成，随后跟着一个分号。（有一些例外不需要分号。早先提到的QUIT是一个例子。后面我们将看到其它的例子。）\\n\\n·         当发出一个命令时，mysql将它发送给服务器并显示执行结果，然后显示另一个mysql>显示它准备好接受其它命令。\\n\\n·         mysql用表格(行和列)方式显示查询输出。第一行包含列的标签，随后的行是查询结果。通常，列标签是你取自数据库表的列的名字。如果你正在检索一个表达式而非表列的值(如刚才的例子)，mysql用表达式本身标记列。\\n\\n·         mysql显示返回了多少行，以及查询花了多长时间，它给你提供服务器性能的一个大致概念。因为他们表示时钟时间(不是 CPU 或机器时间)，并且因为他们受到诸如服务器负载和网络延时的影响，因此这些值是不精确的。（为了简洁，在本章其它例子中不再显示“集合中的行”。）\\n\\n能够以大小写输入关键词。下列查询是等价的：\\n\\nmysql> SELECT VERSION(), CURRENT_DATE;\\nmysql> select version(), current_date;\\nmysql> SeLeCt vErSiOn(), current_DATE;\\n这是另外一个查询，它说明你能将mysql用作一个简单的计算器：\\n\\nmysql> SELECT SIN(PI()/4), (4 1)*5;\\n ------------------ --------- \\n| SIN(PI()/4)      | (4 1)*5 |\\n ------------------ --------- \\n| 0.70710678118655 |      25 |\\n ------------------ --------- \\n1 row in set (0.02 sec)\\n至此显示的命令是相当短的单行语句。你可以在一行上输入多条语句，只需要以一个分号间隔开各语句：\\n\\nmysql> SELECT VERSION(); SELECT NOW();\\n ----------------- \\n| VERSION()       |\\n ----------------- \\n| 5.1.2-alpha-log |\\n ----------------- \\n1 row in set (0.00 sec)\\n \\n --------------------- \\n| NOW()               |\\n --------------------- \\n| 2005-10-11 15:15:00 |\\n --------------------- \\n1 row in set (0.00 sec)\\n不必全在一个行内给出一个命令，较长命令可以输入到多个行中。mysql通过寻找终止分号而不是输入行的结束来决定语句在哪儿结束。（换句话说，mysql接受自由格式的输入：它收集输入行但直到看见分号才执行。）\\n\\n这里是一个简单的多行语句的例子：\\n\\nmysql> SELECT\\n    -> USER()\\n    -> ,\\n    -> CURRENT_DATE;\\n --------------- -------------- \\n| USER()        | CURRENT_DATE |\\n --------------- -------------- \\n| jon@localhost | 2005-10-11   |\\n --------------- -------------- \\n在这个例子中，在输入多行查询的第一行后，要注意提示符如何从mysql>变为->，这正是mysql如何指出它没见到完整的语句并且正在等待剩余的部分。提示符是你的朋友，因为它提供有价值的反馈，如果使用该反馈，将总是知道mysql正在等待什么。\\n\\n如果你决定不想执行正在输入过程中的一个命令，输入/c取消它：\\n\\nmysql> SELECT\\n    -> USER()\\n    -> /c\\nmysql>\\n这里也要注意提示符，在你输入/c以后，它切换回到mysql>，提供反馈以表明mysql准备接受一个新命令。\\n\\n下表显示出可以看见的各个提示符并简述它们所表示的mysql的状态：\\n\\n提示符\\n\\n含义\\n\\nmysql>\\n\\n准备好接受新命令。\\n\\n->\\n\\n等待多行命令的下一行。\\n\\n\\\'>\\n\\n等待下一行，等待以单引号(“\\\'”)开始的字符串的结束。\\n\\n\\">\\n\\n等待下一行，等待以双引号(“\\"”)开始的字符串的结束。\\n\\n`>\\n\\n等待下一行，等待以反斜点(‘`’)开始的识别符的结束。\\n\\n/*>\\n\\n等待下一行，等待以/*开始的注释的结束。\\n\\n当你打算在一个单行上发出一个命令时，通常会“偶然”出现多行语句，但是没有终止分号。在这种情况中，mysql等待进一步输入：\\n\\nmysql> SELECT USER()\\n    ->\\n如果出现这种情况(你认为输完了语句，但是只有一个->提示符响应)，很可能mysql正在等待分号。如果你没有注意到提示符的提示，在意识到你需要做什么之前，你可能会呆坐一会儿。输入一个分号完成语句，mysql将执行：\\n\\nmysql> SELECT USER()\\n    -> ;\\n --------------- \\n| USER()        |\\n --------------- \\n| jon@localhost |\\n --------------- \\n在字符串收集期间将出现 \\\'> 和 \\"> 提示符（提示MySQL正等待字符串的结束）。在MySQL中，可以写由‘\\\'’或‘\\"’字符括起来的字符串 (例如，\\\'hello\\\'或\\"goodbye\\")，并且mysql允许输入跨越多行的字符串。当看到一个 \\\'> 或 \\"> 提示符时，这意味着已经输入了包含以‘\\\'’或‘\\"’括号字符开始的字符串的一行，但是还没有输入终止字符串的匹配引号。这显示你粗心地省掉了一个引号字符。例如：\\n\\nmysql> SELECT * FROM my_table WHERE name = \\\'Smith AND age < 30;\\n    \\\'>\\n如果你输入SELECT语句，然后按Enter（回车）键并等待结果，什么都没有出现。不要惊讶，“为什么该查询这么长呢？”，注意\\">提示符提供的线索。它告诉你mysql期望见到一个未终止字符串的余下部分。（你看见语句中的错误吗？字符串\\"Smith丢掉了第二个引号。）\\n\\n走到这一步，你该做什么？最简单的是取消命令。然而，在这种情况下，你不能只是输入/c，因为mysql作为它正在收集的字符串的一部分来解释它！相反，应输入关闭的引号字符(这样mysql知道你完成了字符串)，然后输入/c：\\n\\nmysql> SELECT * FROM my_table WHERE name = \\\'Smith AND age < 30;\\n    \\\'> \\\'/c\\nmysql>\\n提示符回到mysql>，显示mysql准备好接受一个新命令了。\\n\\n`> 提示符类似于 \\\'> 和\\"> 提示符，但表示你已经开始但没有结束以`> 开始的识别符。\\n\\n知道\\\'>和\\">提示符的含义很重要，因为如果你错误地输入一个未终止的字符串，任何后面输入的行将要被mysql忽略--包括包含QUIT的行！这可能令人相当困惑，特别是如果取消当前命令前还不知道你需要提供终止引号。\\n\\n3.3. 创建并使用数据库\\n3.3.1. 创建并选择数据库\\n3.3.2. 创建表\\n3.3.3. 将数据装入表中\\n3.3.4. 从表检索信息\\n知道怎样输入命令，便可以访问数据库了。\\n\\n假定在你的家(你的“动物园”)中有很多宠物，并且你想跟踪关于它们各种类型的信息。你可以通过创建表来保存你的数据并根据所需要的信息装载他们，然后你可以从表中检索数据来回答关于动物不同种类的问题。本节显示如何做到所有这些事情：\\n\\n·         创建数据库\\n\\n·         创建数据库表\\n\\n·         装载数据到数据库表\\n\\n·         以各种方法从表中检索数据\\n\\n·         使用多个表\\n\\n动物园数据库很简单(特意的)，但是不难把它想象成可能用到类似数据库的真实世界情况。例如，农夫可以使用这样的一个数据库来追踪家畜，或者兽医可以用它跟踪病畜记录。从MySQL网址上可以获得后面章节中将用到的含有部分查询和样例数据的动物园分发。有tar压缩格式 (http://downloads.mysql.com/docs/menagerie-db.tar.gz)和Zip压缩格式 (http://downloads.mysql.com/docs/menagerie-db.zip)。\\n\\n使用SHOW语句找出服务器上当前存在什么数据库：\\n\\nmysql> SHOW DATABASES;\\n ---------- \\n| Database |\\n ---------- \\n| mysql    |\\n| test     |\\n| tmp      |\\n ---------- \\n可能你的机器上的数据库列表是不同的，但是很可能有mysql和test数据库。mysql是必需的，因为它描述用户访问权限，test数据库经常作为用户试身手的工作区。\\n\\n请注意如果没有SHOW DATABASES权限，则不能看见所有数据库。参见13.5.1.3节，“GRANT和REVOKE语法”。\\n\\n如果test数据库存在，尝试访问它：\\n\\nmysql> USE test\\nDatabase changed\\n注意，USE，类似QUIT，不需要一个分号。（如果你喜欢，你可以用一个分号终止这样的语句；这无碍）USE语句在使用上也有另外一个特殊的地方：它必须在一个单行上给出。\\n\\n你可列在后面的例子中使用test数据库(如果你能访问它)，但是你在该数据库创建的任何东西可以被访问它的其它人删除，因此，你应该询问MySQL管理员许可你使用自己的一个数据库。假定你想要调用你的menagerie，管理员需要执行这样一条命令：\\n\\nmysql> GRANT ALL ON menagerie.* TO \\\'your_mysql_name\\\'@\\\'your_client_host\\\';\\n这里your_mysql_name是分配给你的MySQL用户名，your_client_host是所连接的服务器所在的主机。\\n\\n3.3.1. 创建并选择数据库\\n如果管理员在设置权限时为你创建了数据库，你可以开始使用它。否则，你需要自己创建数据库：\\nmysql> CREATE DATABASE menagerie;\\n在Unix下，数据库名称是区分大小写的(不像SQL关键字)，因此你必须总是以menagerie访问数据库，而不能用Menagerie、MENAGERIE或其它一些变量。对表名也是这样的。（在Windows下，该限制不适用，尽管你必须在一个给定的查询中使用同样的大小写来引用数据库和表。但是，由于多种原因，作为最好的惯例，一定要使用与数据库创建时的同样的大小写。）\\n\\n创建数据库并不表示选定并使用它，你必须明确地操作。为了使menagerie成为当前的数据库，使用这个命令：\\n\\nmysql> USE menagerie\\nDatabase changed\\n数据库只需要创建一次，但是必须在每次启动mysql会话时在使用前先选择它。你可以根据上面的例子执行一个USE语句来实现。还可以在调用mysql时，通过命令行选择数据库，只需要在提供连接参数之后指定数据库名称。例如：\\n\\nshell> mysql -h host -u user -p menagerie\\nEnter password: ********\\n注意，刚才显示的命令行中的menagerie不是你的 密码。如果你想要在命令行上在-p选项后提供 密码，则不能插入空格(例如，如-pmypassword，不是-p mypassword)。但是，不建议在命令行输入密码，因为这样会暴露 密码，能被在机器上登录的其它用户窥探到。\\n\\n3.3.2. 创建表\\n创建数据库是很容易的部分，但是在这时它是空的，正如SHOW TABLES将告诉你的：\\n\\nmysql> SHOW TABLES;\\nEmpty set (0.00 sec)\\n较难的部分是决定你的数据库结构应该是什么：你需要什么数据库表，各数据库表中有什么样的列。\\n\\n你将需要一个包含你每个宠物的记录的表。它可称为pet表，并且它应该包含，最少，每个动物的名字。因为名字本身不是很有趣，表应该包含另外的信息。例如，如果在你豢养宠物的家庭有超过一个人，你可能想要列出每个动物的主人。你可能也想要记录例如种类和性别的一些基本的描述信息。\\n\\n年龄呢？那可能有趣，但是存储到一个数据库中不是一件好事情。年龄随着时间流逝而变化，这意味着你将要不断地更新你的记录。相反, 存储一个固定值例如生日比较好，那么，无论何时你需要年龄，可以以当前日期和出生日期之间的差来计算它。MySQL提供了日期运算函数，因此这并不困难。存储出生日期而非年龄还有其它优点：\\n\\n·         你可以使用数据库完成这样的任务，例如生成即将到来的宠物生日的提示。（如果你认为这类查询有点蠢，注意，这与从商务数据库来识别出不久要发给生日祝贺的客户是同一个问题，因为计算机帮助私人联络。）\\n\\n·         你可以相对于日期而不止是当前日期来计算年龄。例如，如果你在数据库存储死亡日期，你能很容易地计算出一只宠物死时有多大。\\n\\n你可能想到pet表中其它有用的其它类型信息，但是到目前为止这些已经足够了：名字、主人、种类，性别、出生和死亡日期。\\n\\n使用一个CREATE TABLE语句指定你的数据库表的布局：\\n\\nmysql> CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),\\n    -> species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);\\nVARCHAR适合于name、owner和species列，因为列值是变长的。这些列的长度不必都相同，而且不必是20。你可以挑选从1到65535的任何长度，从中选择一个最合理的值。（如果选择得不合适，后来证明你需要一个更长的字段，MySQL提供一个ALTER TABLE语句。）\\n\\n可以用多种类型的值来表示动物记录中的性别，例如，\\"m\\"和\\"f\\"，或\\"male\\"和\\"female\\"。使用单字符\\"m\\"和\\"f\\"是最简单的方法。\\n\\n很显然，birth和death列应选用DATE数据类。\\n\\n创建了数据库表后，SHOW TABLES应该产生一些输出：\\n\\nmysql> SHOW TABLES;\\n --------------------- \\n| Tables in menagerie |\\n --------------------- \\n| pet                 |\\n --------------------- \\n为了验证你的表是按你期望的方式创建，使用一个DESCRIBE语句：\\n\\nmysql> DESCRIBE pet;\\n --------- ------------- ------ ----- --------- ------- \\n| Field   | Type        | Null | Key | Default | Extra |\\n --------- ------------- ------ ----- --------- ------- \\n| name    | varchar(20) | YES  |     | NULL    |       |\\n| owner   | varchar(20) | YES  |     | NULL    |       |\\n| species | varchar(20) | YES  |     | NULL    |       |\\n| sex     | char(1)     | YES  |     | NULL    |       |\\n| birth   | date        | YES  |     | NULL    |       |\\n| death   | date        | YES  |     | NULL    |       |\\n --------- ------------- ------ ----- --------- ------- \\n你可以随时使用DESCRIBE，例如，如果你忘记表中的列的名称或类型时。\\n\\n3.3.3. 将数据装入表中\\n创建表后，需要填入内容。通过LOAD DATA和INSERT语句可以完成该任务。\\n\\n假定你的宠物纪录描述如下。（假定在MySQL中期望的日期格式是YYYY-MM-DD；这可能与你习惯的不同。）\\n\\nname\\n\\nowner\\n\\nspecies\\n\\nsex\\n\\nbirth\\n\\ndeath\\n\\nFluffy\\n\\nHarold\\n\\ncat\\n\\nf\\n\\n1993-02-04\\n\\n \\n\\nClaws\\n\\nGwen\\n\\ncat\\n\\nm\\n\\n1994-03-17\\n\\n \\n\\nBuffy\\n\\nHarold\\n\\ndog\\n\\nf\\n\\n1989-05-13\\n\\n \\n\\nFang\\n\\nBenny\\n\\ndog\\n\\nm\\n\\n1990-08-27\\n\\n \\n\\nBowser\\n\\nDiane\\n\\ndog\\n\\nm\\n\\n1979-08-31\\n\\n1995-07-29\\n\\nChirpy\\n\\nGwen\\n\\nbird\\n\\nf\\n\\n1998-09-11\\n\\n \\n\\nWhistler\\n\\nGwen\\n\\nbird\\n\\n \\n\\n1997-12-09\\n\\n \\n\\nSlim\\n\\nBenny\\n\\nsnake\\n\\nm\\n\\n1996-04-29\\n\\n \\n\\n因为你是从一个空表开始的，填充它的一个简易方法是创建一个文本文件，每个动物各一行，然后用一个语句将文件的内容装载到表中。\\n\\n你可以创建一个文本文件“pet.txt”，每行包含一个记录，用定位符(tab)把值分开，并且以CREATE TABLE语句中列出的列次序给出。对于丢失的值(例如未知的性别，或仍然活着的动物的死亡日期)，你可以使用NULL值。为了在你的文本文件中表示这些内容，使用/N（反斜线，字母N）。例如，Whistler鸟的记录应为(这里值之间的空白是一个定位符)：\\n\\nname\\n\\nowner\\n\\nspecies\\n\\nsex\\n\\nbirth\\n\\ndeath\\n\\nWhistler\\n\\nGwen\\n\\nbird\\n\\n/N\\n\\n1997-12-09\\n\\n/N\\n\\n要想将文本文件“pet.txt”装载到pet表中，使用这个命令：\\n\\nmysql> LOAD DATA LOCAL INFILE \\\'/path/pet.txt\\\' INTO TABLE pet;\\n请注意如果用Windows中的编辑器（使用/r/n做为行的结束符）创建文件，应使用：\\n\\nmysql> LOAD DATA LOCAL INFILE \\\'/path/pet.txt\\\' INTO TABLE pet\\n    -> LINES TERMINATED BY \\\'/r/n\\\';\\n（在运行OS X的Apple机上，应使用行结束符\\\'/r\\\'。）\\n\\n如果你愿意，你能明确地在LOAD DATA语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。这对读入文件“pet.txt”的语句已经足够。\\n\\n如果该语句失败，可能是你安装的MySQL不与使用默认值的本地文件兼容。关于如何更改请参见5.6.4节，“LOAD DATA LOCAL安全问题”。\\n\\n如果想要一次增加一个新记录，可以使用INSERT语句。最简单的形式是，提供每一列的值，其顺序与CREATE TABLE语句中列的顺序相同。假定Diane把一只新仓鼠命名为Puffball，你可以使用下面的INSERT语句添加一条新记录：\\n\\nmysql> INSERT INTO pet\\n    -> VALUES (\\\'Puffball\\\',\\\'Diane\\\',\\\'hamster\\\',\\\'f\\\',\\\'1999-03-30\\\',NULL);\\n注意，这里字符串和日期值均为引号扩起来的字符串。另外，可以直接用INSERT语句插入NULL代表不存在的值。不能使用LOAD DATA中所示的的/N。\\n\\n从这个例子，你应该能看到涉及很多的键入用多个INSERT语句而非单个LOAD DATA语句装载你的初始记录。\\n\\n3.3.4. 从表检索信息\\n3.3.4.1. 选择所有数据\\n3.3.4.2. 选择特殊行\\n3.3.4.3. 选择特殊列\\n3.3.4.4. 分类行\\n3.3.4.5. 日期计算\\n3.3.4.6. NULL值操作\\n3.3.4.7. 模式匹配\\n3.3.4.8. 计数行\\n3.3.4.9. 使用1个以上的表\\n \\nSELECT语句用来从数据表中检索信息。语句的一般格式是：\\nSELECT what_to_select\\nFROM which_table\\nWHERE conditions_to_satisfy;\\nwhat_to_select指出你想要看到的内容，可以是列的一个表，或*表示“所有的列”。which_table指出你想要从其检索数据的表。WHERE子句是可选项，如果选择该项，conditions_to_satisfy指定行必须满足的检索条件。\\n\\n3.3.4.1. 选择所有数据\\nSELECT最简单的形式是从一个表中检索所有记录：\\nmysql> SELECT * FROM pet;\\n ---------- -------- --------- ------ ------------ ------------ \\n| name     | owner  | species | sex  | birth      | death      |\\n ---------- -------- --------- ------ ------------ ------------ \\n| Fluffy   | Harold | cat     | f    | 1993-02-04 | NULL       |\\n| Claws    | Gwen   | cat     | m    | 1994-03-17 | NULL       |\\n| Buffy    | Harold | dog     | f    | 1989-05-13 | NULL       |\\n| Fang     | Benny  | dog     | m    | 1990-08-27 | NULL       |\\n| Bowser   | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |\\n| Chirpy   | Gwen   | bird    | f    | 1998-09-11 | NULL       |\\n| Whistler | Gwen   | bird    | NULL | 1997-12-09 | NULL       |\\n| Slim     | Benny  | snake   | m    | 1996-04-29 | NULL       |\\n| Puffball | Diane  | hamster | f    | 1999-03-30 | NULL       |\\n ---------- -------- --------- ------ ------------ ------------ \\n如果你想要浏览整个表，可以使用这种形式的SELECT，例如，刚刚装载了初始数据集以后。也有可能你想到Bowser的生日看起来不很对。查阅你原来的家谱，你发现正确的出生年是1989，而不是1979。\\n\\n至少有两种修正方法：\\n\\n·         编辑文件“pet.txt”改正错误，然后使用DELETE和LOAD DATA清空并重新装载表:\\n\\n·                mysql> DELETE FROM pet;\\n·                mysql> LOAD DATA LOCAL INFILE \\\'pet.txt\\\' INTO TABLE pet;\\n然而, 如果这样操做，必须重新输入Puffball记录。\\n\\n·         用一个UPDATE语句仅修正错误记录：\\n\\n·                mysql> UPDATE pet SET birth = \\\'1989-08-31\\\' WHERE name = \\\'Bowser\\\';\\nUPDATE只更改有问题的记录，不需要重新装载数据库表。\\n\\n3.3.4.2. 选择特殊行\\n如上所示，检索整个表是容易的。只需要从SELECT语句中删掉WHERE子句。但是一般你不想看到整个表，特别地当表变得很大时。相反，你通常对回答一个具体的问题更感兴趣，在这种情况下在你想要的信息上进行一些限制。让我们看一些他们回答的有关你宠物的问题的选择查询。\\n可以从表中只选择特定的行。例如，如果你想要验证你对Bowser的生日所做的更改，按下述方法选择Bowser的记录：\\n\\nmysql> SELECT * FROM pet WHERE name = \\\'Bowser\\\';\\n -------- ------- --------- ------ ------------ ------------ \\n| name   | owner | species | sex  | birth      | death      |\\n -------- ------- --------- ------ ------------ ------------ \\n| Bowser | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |\\n -------- ------- --------- ------ ------------ ------------ \\n输出证实正确的年份记录为1989，而不是1979。\\n\\n字符串比较时通常对大小些不敏感，因此你可以将名字指定为\\"bowser\\"、\\"BOWSER\\"等，查询结果相同。\\n\\n你可以在任何列上指定条件，不只仅仅是name。例如，如果你想要知道哪个动物在1998以后出生的，测试birth列：\\n\\nmysql> SELECT * FROM pet WHERE birth > \\\'1998-1-1\\\';\\n ---------- ------- --------- ------ ------------ ------- \\n| name     | owner | species | sex  | birth      | death |\\n ---------- ------- --------- ------ ------------ ------- \\n| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |\\n| Puffball | Diane | hamster | f    | 1999-03-30 | NULL  |\\n ---------- ------- --------- ------ ------------ ------- \\n可以组合条件，例如，找出雌性的狗：\\n\\nmysql> SELECT * FROM pet WHERE species = \\\'dog\\\' AND sex = \\\'f\\\';\\n ------- -------- --------- ------ ------------ ------- \\n| name  | owner  | species | sex  | birth      | death |\\n ------- -------- --------- ------ ------------ ------- \\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\\n ------- -------- --------- ------ ------------ ------- \\n上面的查询使用AND逻辑操作符，也有一个OR操作符：\\n\\nmysql> SELECT * FROM pet WHERE species = \\\'snake\\\' OR species = \\\'bird\\\';\\n ---------- ------- --------- ------ ------------ ------- \\n| name     | owner | species | sex  | birth      | death |\\n ---------- ------- --------- ------ ------------ ------- \\n| Chirpy   | Gwen  | bird    | f    | 1998-09-11 | NULL  |\\n| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL  |\\n| Slim     | Benny | snake   | m    | 1996-04-29 | NULL  |\\n ---------- ------- --------- ------ ------------ ------- \\nAND和OR可以混用，但AND比OR具有更高的优先级。如果你使用两个操作符，使用圆括号指明如何对条件进行分组是一个好主意：\\n\\nmysql> SELECT * FROM pet WHERE (species = \\\'cat\\\' AND sex = \\\'m\\\')\\n    -> OR (species = \\\'dog\\\' AND sex = \\\'f\\\');\\n ------- -------- --------- ------ ------------ ------- \\n| name  | owner  | species | sex  | birth      | death |\\n ------- -------- --------- ------ ------------ ------- \\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\\n ------- -------- --------- ------ ------------ ------- \\n3.3.4.3. 选择特殊列\\n如果你不想看到表中的所有行，就命名你感兴趣的列，用逗号分开。例如，如果你想要知道你的动物什么时候出生的，选择name和birth列：\\nmysql> SELECT name, birth FROM pet;\\n ---------- ------------ \\n| name     | birth      |\\n ---------- ------------ \\n| Fluffy   | 1993-02-04 |\\n| Claws    | 1994-03-17 |\\n| Buffy    | 1989-05-13 |\\n| Fang     | 1990-08-27 |\\n| Bowser   | 1989-08-31 |\\n| Chirpy   | 1998-09-11 |\\n| Whistler | 1997-12-09 |\\n| Slim     | 1996-04-29 |\\n| Puffball | 1999-03-30 |\\n ---------- ------------ \\n找出谁拥有宠物，使用这个查询：\\n\\nmysql> SELECT owner FROM pet;\\n -------- \\n| owner  |\\n -------- \\n| Harold |\\n| Gwen   |\\n| Harold |\\n| Benny  |\\n| Diane  |\\n| Gwen   |\\n| Gwen   |\\n| Benny  |\\n| Diane  |\\n -------- \\n请注意该查询只是简单地检索每个记录的owner列，并且他们中的一些出现多次。为了使输出减到最少，增加关键字DISTINCT检索出每个唯一的输出记录：\\n\\nmysql> SELECT DISTINCT owner FROM pet;\\n -------- \\n| owner  |\\n -------- \\n| Benny  |\\n| Diane  |\\n| Gwen   |\\n| Harold |\\n -------- \\n可以使用一个WHERE子句结合行选择与列选择。例如，要想查询狗和猫的出生日期，使用这个查询：\\n\\nmysql> SELECT name, species, birth FROM pet\\n    -> WHERE species = \\\'dog\\\' OR species = \\\'cat\\\';\\n -------- --------- ------------ \\n| name   | species | birth      |\\n -------- --------- ------------ \\n| Fluffy | cat     | 1993-02-04 |\\n| Claws  | cat     | 1994-03-17 |\\n| Buffy  | dog     | 1989-05-13 |\\n| Fang   | dog     | 1990-08-27 |\\n| Bowser | dog     | 1989-08-31 |\\n -------- --------- ------------ \\n3.3.4.4. 分类行\\n你可能已经注意到前面的例子中结果行没有以特定的顺序显示。然而，当行按某种方式排序时，检查查询输出通常更容易。为了排序结果，使用ORDER BY子句。\\n这里是动物生日，按日期排序：\\n\\nmysql> SELECT name, birth FROM pet ORDER BY birth;\\n ---------- ------------ \\n| name     | birth      |\\n ---------- ------------ \\n| Buffy    | 1989-05-13 |\\n| Bowser   | 1989-08-31 |\\n| Fang     | 1990-08-27 |\\n| Fluffy   | 1993-02-04 |\\n| Claws    | 1994-03-17 |\\n| Slim     | 1996-04-29 |\\n| Whistler | 1997-12-09 |\\n| Chirpy   | 1998-09-11 |\\n| Puffball | 1999-03-30 |\\n ---------- ------------ \\n在字符类型列上，与所有其他比较操作类似，分类功能正常情况下是以区分大小写的方式执行的。这意味着，对于等同但大小写不同的列，并未定义其顺序。对于某一列，可以使用BINARY强制执行区分大小写的分类功能，如：ORDER BY BINARY col_name.\\n\\n默认排序是升序，最小的值在第一。要想以降序排序，在你正在排序的列名上增加DESC（降序 ）关键字：\\n\\nmysql> SELECT name, birth FROM pet ORDER BY birth DESC;\\n ---------- ------------ \\n| name     | birth      |\\n ---------- ------------ \\n| Puffball | 1999-03-30 |\\n| Chirpy   | 1998-09-11 |\\n| Whistler | 1997-12-09 |\\n| Slim     | 1996-04-29 |\\n| Claws    | 1994-03-17 |\\n| Fluffy   | 1993-02-04 |\\n| Fang     | 1990-08-27 |\\n| Bowser   | 1989-08-31 |\\n| Buffy    | 1989-05-13 |\\n ---------- ------------ \\n可以对多个列进行排序，并且可以按不同的方向对不同的列进行排序。例如，按升序对动物的种类进行排序，然后按降序根据生日对各动物种类进行排序（最年轻的动物在最前面），使用下列查询：\\n\\nmysql> SELECT name, species, birth FROM pet\\n    -> ORDER BY species, birth DESC;\\n ---------- --------- ------------ \\n| name     | species | birth      |\\n ---------- --------- ------------ \\n| Chirpy   | bird    | 1998-09-11 |\\n| Whistler | bird    | 1997-12-09 |\\n| Claws    | cat     | 1994-03-17 |\\n| Fluffy   | cat     | 1993-02-04 |\\n| Fang     | dog     | 1990-08-27 |\\n| Bowser   | dog     | 1989-08-31 |\\n| Buffy    | dog     | 1989-05-13 |\\n| Puffball | hamster | 1999-03-30 |\\n| Slim     | snake   | 1996-04-29 |\\n ---------- --------- ------------ \\n注意DESC关键字仅适用于在它前面的列名(birth)；不影响species列的排序顺序。\\n\\n3.3.4.5. 日期计算\\nMySQL提供了几个函数，可以用来计算日期，例如，计算年龄或提取日期部分。\\n\\n要想确定每个宠物有多大，可以计算当前日期的年和出生日期之间的差。如果当前日期的日历年比出生日期早，则减去一年。以下查询显示了每个宠物的出生日期、当前日期和年龄数值的年数字。\\n\\nmysql> SELECT name, birth, CURDATE(),\\n    -> (YEAR(CURDATE())-YEAR(birth))\\n    -> - (RIGHT(CURDATE(),5)<RIGHT(birth,5))\\n    -> AS age\\n    -> FROM pet;\\n ---------- ------------ ------------ ------ \\n| name     | birth      | CURDATE()  | age  |\\n ---------- ------------ ------------ ------ \\n| Fluffy   | 1993-02-04 | 2003-08-19 |   10 |\\n| Claws    | 1994-03-17 | 2003-08-19 |    9 |\\n| Buffy    | 1989-05-13 | 2003-08-19 |   14 |\\n| Fang     | 1990-08-27 | 2003-08-19 |   12 |\\n| Bowser   | 1989-08-31 | 2003-08-19 |   13 |\\n| Chirpy   | 1998-09-11 | 2003-08-19 |    4 |\\n| Whistler | 1997-12-09 | 2003-08-19 |    5 |\\n| Slim     | 1996-04-29 | 2003-08-19 |    7 |\\n| Puffball | 1999-03-30 | 2003-08-19 |    4 |\\n ---------- ------------ ------------ ------ \\n此处，YEAR()提取日期的年部分，RIGHT()提取日期的MM-DD (日历年)部分的最右面5个字符。比较MM-DD值的表达式部分的值一般为1或0，如果CURDATE()的年比birth的年早，则年份应减去1。整个表达式有些难懂，使用alias (age)来使输出的列标记更有意义。\\n\\n尽管查询可行，如果以某个顺序排列行，则能更容易地浏览结果。添加ORDER BY name子句按照名字对输出进行排序则能够实现。\\n\\nmysql> SELECT name, birth, CURDATE(),\\n    -> (YEAR(CURDATE())-YEAR(birth))\\n    -> - (RIGHT(CURDATE(),5)<RIGHT(birth,5))\\n    -> AS age\\n    -> FROM pet ORDER BY name;\\n ---------- ------------ ------------ ------ \\n| name     | birth      | CURDATE()  | age  |\\n ---------- ------------ ------------ ------ \\n| Bowser   | 1989-08-31 | 2003-08-19 |   13 |\\n| Buffy    | 1989-05-13 | 2003-08-19 |   14 |\\n| Chirpy   | 1998-09-11 | 2003-08-19 |    4 |\\n| Claws    | 1994-03-17 | 2003-08-19 |    9 |\\n| Fang     | 1990-08-27 | 2003-08-19 |   12 |\\n| Fluffy   | 1993-02-04 | 2003-08-19 |   10 |\\n| Puffball | 1999-03-30 | 2003-08-19 |    4 |\\n| Slim     | 1996-04-29 | 2003-08-19 |    7 |\\n| Whistler | 1997-12-09 | 2003-08-19 |    5 |\\n ---------- ------------ ------------ ------ \\n为了按age而非name排序输出，只要再使用一个ORDER BY子句：\\n\\nmysql> SELECT name, birth, CURDATE(),\\n    -> (YEAR(CURDATE())-YEAR(birth))\\n    -> - (RIGHT(CURDATE(),5)<RIGHT(birth,5))\\n    -> AS age\\n    -> FROM pet ORDER BY age;\\n ---------- ------------ ------------ ------ \\n| name     | birth      | CURDATE()  | age  |\\n ---------- ------------ ------------ ------ \\n| Chirpy   | 1998-09-11 | 2003-08-19 |    4 |\\n| Puffball | 1999-03-30 | 2003-08-19 |    4 |\\n| Whistler | 1997-12-09 | 2003-08-19 |    5 |\\n| Slim     | 1996-04-29 | 2003-08-19 |    7 |\\n| Claws    | 1994-03-17 | 2003-08-19 |    9 |\\n| Fluffy   | 1993-02-04 | 2003-08-19 |   10 |\\n| Fang     | 1990-08-27 | 2003-08-19 |   12 |\\n| Bowser   | 1989-08-31 | 2003-08-19 |   13 |\\n| Buffy    | 1989-05-13 | 2003-08-19 |   14 |\\n ---------- ------------ ------------ ------ \\n可以使用一个类似的查询来确定已经死亡动物的死亡年龄。你通过检查death值是否是NULL来确定是哪些动物，然后，对于那些非NULL值的动物，需要计算出death和birth值之间的差：\\n\\nmysql> SELECT name, birth, death,\\n    -> (YEAR(death)-YEAR(birth)) - (RIGHT(death,5)<RIGHT(birth,5))\\n    -> AS age\\n    -> FROM pet WHERE death IS NOT NULL ORDER BY age;\\n -------- ------------ ------------ ------ \\n| name   | birth      | death      | age  |\\n -------- ------------ ------------ ------ \\n| Bowser | 1989-08-31 | 1995-07-29 |    5 |\\n -------- ------------ ------------ ------ \\n查询使用death IS NOT NULL而非death != NULL，因为NULL是特殊的值，不能使用普通比较符来比较，以后会给出解释。参见3.3.4.6节，“NULL值操作”。\\n\\n如果你想要知道哪个动物下个月过生日，怎么办？对于这类计算，年和天是无关的，你只需要提取birth列的月份部分。MySQL提供几个日期部分的提取函数，例如YEAR( )、MONTH( )和DAYOFMONTH( )。在这里MONTH()是适合的函数。为了看它怎样工作，运行一个简单的查询，显示birth和MONTH(birth)的值：\\n\\nmysql> SELECT name, birth, MONTH(birth) FROM pet;\\n ---------- ------------ -------------- \\n| name     | birth      | MONTH(birth) |\\n ---------- ------------ -------------- \\n| Fluffy   | 1993-02-04 |            2 |\\n| Claws    | 1994-03-17 |            3 |\\n| Buffy    | 1989-05-13 |            5 |\\n| Fang     | 1990-08-27 |            8 |\\n| Bowser   | 1989-08-31 |            8 |\\n| Chirpy   | 1998-09-11 |            9 |\\n| Whistler | 1997-12-09 |           12 |\\n| Slim     | 1996-04-29 |            4 |\\n| Puffball | 1999-03-30 |            3 |\\n ---------- ------------ -------------- \\n找出下个月生日的动物也是容易的。假定当前月是4月，那么月值是4，你可以找在5月出生的动物 (5月)，方法是：\\n\\nmysql> SELECT name, birth FROM pet WHERE MONTH(birth) = 5;\\n ------- ------------ \\n| name  | birth      |\\n ------- ------------ \\n| Buffy | 1989-05-13 |\\n ------- ------------ \\n如果当前月份是12月，就有点复杂了。你不能只把1加到月份数(12)上并寻找在13月出生的动物，因为没有这样的月份。相反，你应寻找在1月出生的动物(1月) 。\\n\\n你甚至可以编写查询，不管当前月份是什么它都能工作。采用这种方法不必在查询中使用一个特定的月份，DATE_ADD( )允许在一个给定的日期上加上时间间隔。如果在NOW( )值上加上一个月，然后用MONTH()提取月份，结果产生生日所在月份：\\n\\nmysql> SELECT name, birth FROM pet\\n    -> WHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH));\\n完成该任务的另一个方法是加1以得出当前月份的下一个月(在使用取模函数(MOD)后，如果月份当前值是12，则“回滚”到值0)：\\n\\nmysql> SELECT name, birth FROM pet\\n    -> WHERE MONTH(birth) = MOD(MONTH(CURDATE()), 12)   1;\\n注意，MONTH返回在1和12之间的一个数字，且MOD(something,12)返回在0和11之间的一个数字，因此必须在MOD( )以后加1，否则我们将从11月( 11 )跳到1月(1)。\\n\\n3.3.4.6. NULL值操作\\nNULL值可能令人感到奇怪直到你习惯它。概念上，NULL意味着“没有值”或“未知值”，且它被看作与众不同的值。为了测试NULL，你不能使用算术比较 操作符例如=、<或!=。为了说明它，试试下列查询：\\n\\nmysql> SELECT 1 = NULL, 1 <> NULL, 1 < NULL, 1 > NULL;\\n ---------- ----------- ---------- ---------- \\n| 1 = NULL | 1 <> NULL | 1 < NULL | 1 > NULL |\\n ---------- ----------- ---------- ---------- \\n|     NULL |      NULL |     NULL |     NULL |\\n ---------- ----------- ---------- ---------- \\n很显然你不能通过这些比较得到有意义的结果。相反使用IS NULL和IS NOT NULL操作符：\\n\\nmysql> SELECT 1 IS NULL, 1 IS NOT NULL;\\n ----------- --------------- \\n| 1 IS NULL | 1 IS NOT NULL |\\n ----------- --------------- \\n|         0 |             1 |\\n ----------- --------------- \\n请注意在MySQL中，0或 NULL意味着假而其它值意味着真。布尔运算的默认真值是1。\\n\\n对NULL的特殊处理即是在前面的章节中，为了决定哪个动物不再是活着的，使用death IS NOT NULL而不使用death != NULL的原因。\\n\\n在GROUP BY中，两个NULL值视为相同。\\n\\n执行ORDER BY时，如果运行 ORDER BY ... ASC，则NULL值出现在最前面，若运行ORDER BY ... DESC，则NULL值出现在最后面。\\n\\nNULL操作的常见错误是不能在定义为NOT NULL的列内插入0或空字符串，但事实并非如此。在NULL表示\\"没有数值\\"的地方有数值。使用IS [NOT] NULL则可以很容易地进行测试，如下所示：\\n\\nmysql> SELECT 0 IS NULL, 0 IS NOT NULL, \\\'\\\' IS NULL, \\\'\\\' IS NOT NULL;\\n ----------- --------------- ------------ ---------------- \\n| 0 IS NULL | 0 IS NOT NULL | \\\'\\\' IS NULL | \\\'\\\' IS NOT NULL |\\n ----------- --------------- ------------ ---------------- \\n|         0 |             1 |          0 |              1 |\\n ----------- --------------- ------------ ---------------- \\n因此完全可以在定义为NOT NULL的列内插入0或空字符串，实际是NOT NULL。参见A.5.3节，“与NULL值有关的问题”。\\n\\n3.3.4.7. 模式匹配\\nMySQL提供标准的SQL模式匹配，以及一种基于象Unix实用程序如vi、grep和sed的扩展正则表达式模式匹配的格式。\\n\\nSQL模式匹配允许你使用“_”匹配任何单个字符，而“%”匹配任意数目字符(包括零字符)。在MySQL中，SQL的模式默认是忽略大小写的。下面给出一些例子。注意使用SQL模式时，不能使用=或!=；而应使用LIKE或NOT LIKE比较操作符。\\n\\n要想找出以“b”开头的名字：\\n\\nmysql> SELECT * FROM pet WHERE name LIKE \\\'b%\\\';\\n -------- -------- --------- ------ ------------ ------------ \\n| name   | owner  | species | sex  | birth      | death      |\\n -------- -------- --------- ------ ------------ ------------ \\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |\\n| Bowser | Diane  | dog     | m    | 1989-08-31 | 1995-07-29 |\\n -------- -------- --------- ------ ------------ ------------ \\n要想找出以“fy”结尾的名字：\\n\\nmysql> SELECT * FROM pet WHERE name LIKE \\\'%fy\\\';\\n -------- -------- --------- ------ ------------ ------- \\n| name   | owner  | species | sex  | birth      | death |\\n -------- -------- --------- ------ ------------ ------- \\n| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |\\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |\\n -------- -------- --------- ------ ------------ ------- \\n要想找出包含“w”的名字：\\n\\nmysql> SELECT * FROM pet WHERE name LIKE \\\'%w%\\\';\\n ---------- ------- --------- ------ ------------ ------------ \\n| name     | owner | species | sex  | birth      | death      |\\n ---------- ------- --------- ------ ------------ ------------ \\n| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |\\n| Bowser   | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |\\n| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |\\n ---------- ------- --------- ------ ------------ ------------ \\n要想找出正好包含5个字符的名字，使用“_”模式字符：\\n\\nmysql> SELECT * FROM pet WHERE name LIKE \\\'_____\\\';\\n ------- -------- --------- ------ ------------ ------- \\n| name  | owner  | species | sex  | birth      | death |\\n ------- -------- --------- ------ ------------ ------- \\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\\n ------- -------- --------- ------ ------------ ------- \\n由MySQL提供的模式匹配的其它类型是使用扩展正则表达式。当你对这类模式进行匹配测试时，使用REGEXP和NOT REGEXP操作符(或RLIKE和NOT RLIKE，它们是同义词)。\\n\\n扩展正则表达式的一些字符是：\\n\\n·         ‘.’匹配任何单个的字符。\\n\\n·         字符类“[...]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”、“b”或“c”。为了命名字符的范围，使用一个“-”。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。\\n\\n·         “ * ”匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的“x”字符，“[0-9]*”匹配任何数量的数字，而“.*”匹配任何数量的任何字符。\\n\\n如果REGEXP模式与被测试值的任何地方匹配，模式就匹配(这不同于LIKE模式匹配，只有与整个值匹配，模式才匹配)。\\n为了定位一个模式以便它必须匹配被测试值的开始或结尾，在模式开始处使用“^”或在模式的结尾用“$”。\\n为了说明扩展正则表达式如何工作，下面使用REGEXP重写上面所示的LIKE查询：\\n\\n为了找出以“b”开头的名字，使用“^”匹配名字的开始：\\n\\nmysql> SELECT * FROM pet WHERE name REGEXP \\\'^b\\\';\\n -------- -------- --------- ------ ------------ ------------ \\n| name   | owner  | species | sex  | birth      | death      |\\n -------- -------- --------- ------ ------------ ------------ \\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL       |\\n| Bowser | Diane  | dog     | m    | 1989-08-31 | 1995-07-29 |\\n -------- -------- --------- ------ ------------ ------------ \\n如果你想强制使REGEXP比较区分大小写，使用BINARY关键字使其中一个字符串变为二进制字符串。该查询只匹配名称首字母的小写‘b’。\\n\\nmysql> SELECT * FROM pet WHERE name REGEXP BINARY \\\'^b\\\';\\n为了找出以“fy”结尾的名字，使用“$”匹配名字的结尾：\\n\\nmysql> SELECT * FROM pet WHERE name REGEXP \\\'fy$\\\';\\n -------- -------- --------- ------ ------------ ------- \\n| name   | owner  | species | sex  | birth      | death |\\n -------- -------- --------- ------ ------------ ------- \\n| Fluffy | Harold | cat     | f    | 1993-02-04 | NULL  |\\n| Buffy  | Harold | dog     | f    | 1989-05-13 | NULL  |\\n -------- -------- --------- ------ ------------ ------- \\n为了找出包含一个“w”的名字，使用以下查询：\\n\\nmysql> SELECT * FROM pet WHERE name REGEXP \\\'w\\\';\\n ---------- ------- --------- ------ ------------ ------------ \\n| name     | owner | species | sex  | birth      | death      |\\n ---------- ------- --------- ------ ------------ ------------ \\n| Claws    | Gwen  | cat     | m    | 1994-03-17 | NULL       |\\n| Bowser   | Diane | dog     | m    | 1989-08-31 | 1995-07-29 |\\n| Whistler | Gwen  | bird    | NULL | 1997-12-09 | NULL       |\\n ---------- ------- --------- ------ ------------ ------------ \\n既然如果一个正则表达式出现在值的任何地方，其模式匹配了，就不必在先前的查询中在模式的两侧放置一个通配符以使得它匹配整个值，就像你使用了一个SQL模式那样。\\n\\n为了找出包含正好5个字符的名字，使用“^”和“$”匹配名字的开始和结尾，和5个“.”实例在两者之间：\\n\\nmysql> SELECT * FROM pet WHERE name REGEXP \\\'^.....$\\\';\\n ------- -------- --------- ------ ------------ ------- \\n| name  | owner  | species | sex  | birth      | death |\\n ------- -------- --------- ------ ------------ ------- \\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\\n ------- -------- --------- ------ ------------ ------- \\n你也可以使用“{n}”“重复n次”操作符重写前面的查询：\\n\\nmysql> SELECT * FROM pet WHERE name REGEXP \\\'^.{5}$\\\';\\n ------- -------- --------- ------ ------------ ------- \\n| name  | owner  | species | sex  | birth      | death |\\n ------- -------- --------- ------ ------------ ------- \\n| Claws | Gwen   | cat     | m    | 1994-03-17 | NULL  |\\n| Buffy | Harold | dog     | f    | 1989-05-13 | NULL  |\\n ------- -------- --------- ------ ------------ ------- \\n附录G：MySQL正则表达式 提供了关于正则表达式的句法的详细信息。\\n\\n3.3.4.8. 计数行\\n数据库经常用于回答这个问题，“某个类型的数据在表中出现的频度?”例如，你可能想要知道你有多少宠物，或每位主人有多少宠物，或你可能想要对你的动物进行各种类型的普查。\\n计算你拥有动物的总数目与“在pet表中有多少行?”是同样的问题，因为每个宠物有一个记录。COUNT(*)函数计算行数，所以计算动物数目的查询应为：\\n\\nmysql> SELECT COUNT(*) FROM pet;\\n ---------- \\n| COUNT(*) |\\n ---------- \\n|        9 |\\n ---------- \\n在前面，你检索了拥有宠物的人的名字。如果你想要知道每个主人有多少宠物，你可以使用COUNT( )函数：\\n\\nmysql> SELECT owner, COUNT(*) FROM pet GROUP BY owner;\\n -------- ---------- \\n| owner  | COUNT(*) |\\n -------- ---------- \\n| Benny  |        2 |\\n| Diane  |        2 |\\n| Gwen   |        3 |\\n| Harold |        2 |\\n -------- ---------- \\n注意，使用GROUP BY对每个owner的所有记录分组，没有它，你会得到错误消息：\\n\\nmysql> SELECT owner, COUNT(*) FROM pet;\\nERROR 1140 (42000): Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) \\nwith no GROUP columns is illegal if there is no GROUP BY clause\\nCOUNT( )和GROUP BY以各种方式分类你的数据。下列例子显示出进行动物普查操作的不同方式。\\n\\n每种动物的数量：\\n\\nmysql> SELECT species, COUNT(*) FROM pet GROUP BY species;\\n --------- ---------- \\n| species | COUNT(*) |\\n --------- ---------- \\n| bird    |        2 |\\n| cat     |        2 |\\n| dog     |        3 |\\n| hamster |        1 |\\n| snake   |        1 |\\n --------- ---------- \\n每种性别的动物数量：\\n\\nmysql> SELECT sex, COUNT(*) FROM pet GROUP BY sex;\\n ------ ---------- \\n| sex  | COUNT(*) |\\n ------ ---------- \\n| NULL |        1 |\\n| f    |        4 |\\n| m    |        4 |\\n ------ ---------- \\n（在这个输出中，NULL表示“未知性别”。）\\n\\n按种类和性别组合的动物数量：\\n\\nmysql> SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex;\\n --------- ------ ---------- \\n| species | sex  | COUNT(*) |\\n --------- ------ ---------- \\n| bird    | NULL |        1 |\\n| bird    | f    |        1 |\\n| cat     | f    |        1 |\\n| cat     | m    |        1 |\\n| dog     | f    |        1 |\\n| dog     | m    |        2 |\\n| hamster | f    |        1 |\\n| snake   | m    |        1 |\\n --------- ------ ---------- \\n若使用COUNT( )，你不必检索整个表。例如, 前面的查询，当只对狗和猫进行时，应为：\\n\\nmysql> SELECT species, sex, COUNT(*) FROM pet\\n    -> WHERE species = \\\'dog\\\' OR species = \\\'cat\\\'\\n    -> GROUP BY species, sex;\\n --------- ------ ---------- \\n| species | sex  | COUNT(*) |\\n --------- ------ ---------- \\n| cat     | f    |        1 |\\n| cat     | m    |        1 |\\n| dog     | f    |        1 |\\n| dog     | m    |        2 |\\n --------- ------ ---------- \\n或，如果你仅需要知道已知性别的按性别的动物数目：\\n\\nmysql> SELECT species, sex, COUNT(*) FROM pet\\n    -> WHERE sex IS NOT NULL\\n    -> GROUP BY species, sex;\\n --------- ------ ---------- \\n| species | sex  | COUNT(*) |\\n --------- ------ ---------- \\n| bird    | f    |        1 |\\n| cat     | f    |        1 |\\n| cat     | m    |        1 |\\n| dog     | f    |        1 |\\n| dog     | m    |        2 |\\n| hamster | f    |        1 |\\n| snake   | m    |        1 |\\n --------- ------ ---------- \\n3.3.4.9. 使用1个以上的表\\n \\npet表追踪你有哪个宠物。如果你想要记录其它相关信息，例如在他们一生中看兽医或何时后代出生，你需要另外的表。这张表应该像什么呢？需要：\\n·         它需要包含宠物名字以便你知道每个事件属于哪个动物。\\n\\n·         需要一个日期以便你知道事件是什么时候发生的。\\n\\n·         需要一个描述事件的字段。\\n\\n·         如果你想要对事件进行分类，则需要一个事件类型字段。\\n\\n综合上述因素，event表的CREATE TABLE语句应为：\\n\\nmysql> CREATE TABLE event (name VARCHAR(20), date DATE,\\n    -> type VARCHAR(15), remark VARCHAR(255));\\n对于pet表，最容易的方法是创建包含信息的用定位符分隔的文本文件来装载初始记录：\\n\\nname\\n\\ndate\\n\\ntype\\n\\nremark\\n\\nFluffy\\n\\n1995-05-15\\n\\nlitter\\n\\n4 kittens, 3 female, 1 male\\n\\nBuffy\\n\\n1993-06-23\\n\\nlitter\\n\\n5 puppies, 2 female, 3 male\\n\\nBuffy\\n\\n1994-06-19\\n\\nlitter\\n\\n3 puppies, 3 female\\n\\nChirpy\\n\\n1999-03-21\\n\\nvet\\n\\nneeded beak straightened\\n\\nSlim\\n\\n1997-08-03\\n\\nvet\\n\\nbroken rib\\n\\nBowser\\n\\n1991-10-12\\n\\nkennel\\n\\n \\n\\nFang\\n\\n1991-10-12\\n\\nkennel\\n\\n \\n\\nFang\\n\\n1998-08-28\\n\\nbirthday\\n\\nGave him a new chew toy\\n\\nClaws\\n\\n1998-03-17\\n\\nbirthday\\n\\nGave him a new flea collar\\n\\nWhistler\\n\\n1998-12-09\\n\\nbirthday\\n\\nFirst birthday\\n\\n采用如下方式装载记录：\\n\\nmysql> LOAD DATA LOCAL INFILE \\\'event.txt\\\' INTO TABLE event;\\n根据你从已经运行在pet表上的查询中学到的，你应该能执行对event表中记录的检索；原理是一样的。但是什么时候event表本身不能回答你可能问的问题呢？\\n\\n当他们有了一窝小动物时，假定你想要找出每只宠物的年龄。我们前面看到了如何通过两个日期计算年龄。event表中有母亲的生产日期，但是为了计算母亲的年龄，你需要她的出生日期，存储在pet表中。说明查询需要两个表：\\n\\nmysql> SELECT pet.name,\\n    -> (YEAR(date)-YEAR(birth)) - (RIGHT(date,5)<RIGHT(birth,5)) AS age,\\n    -> remark\\n    -> FROM pet, event\\n    -> WHERE pet.name = event.name AND event.type = \\\'litter\\\';\\n -------- ------ ----------------------------- \\n| name   | age  | remark                      |\\n -------- ------ ----------------------------- \\n| Fluffy |    2 | 4 kittens, 3 female, 1 male |\\n| Buffy  |    4 | 5 puppies, 2 female, 3 male |\\n| Buffy  |    5 | 3 puppies, 3 female         |\\n -------- ------ ----------------------------- \\n关于该查询要注意的几件事情：\\n\\nFROM子句列出两个表，因为查询需要从两个表提取信息。\\n当从多个表组合(联结)信息时，你需要指定一个表中的记录怎样能匹配其它表的记录。这很简单，因为它们都有一个name列。查询使用WHERE子句基于name值来匹配2个表中的记录。\\n因为name列出现在两个表中，当引用列时，你一定要指定哪个表。把表名附在列名前即可以实现。\\n你不必有2个不同的表来进行联结。如果你想要将一个表的记录与同一个表的其它记录进行比较，可以将一个表联结到自身。例如，为了在你的宠物之中繁殖配偶，你可以用pet联结自身来进行相似种类的雄雌配对：\\n\\n \\n\\nmysql> SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species\\n    -> FROM pet AS p1, pet AS p2\\n    -> WHERE p1.species = p2.species AND p1.sex = \\\'f\\\' AND p2.sex = \\\'m\\\';\\n -------- ------ -------- ------ --------- \\n| name   | sex  | name   | sex  | species |\\n -------- ------ -------- ------ --------- \\n| Fluffy | f    | Claws  | m    | cat     |\\n| Buffy  | f    | Fang   | m    | dog     |\\n| Buffy  | f    | Bowser | m    | dog     |\\n -------- ------ -------- ------ --------- \\n在这个查询中，我们为表名指定别名以便能引用列并且使得每一个列引用与哪个表实例相关联更直观。\\n\\n3.4. 获得数据库和表的信息\\n如果你忘记数据库或表的名字，或给定的表的结构是什么(例如，它的列叫什么)，怎么办？MySQL通过提供数据库及其支持的表的信息的几个语句解决这个问题。\\n你已经见到了SHOW DATABASES，它列出由服务器管理的数据库。为了找出当前选择了哪个数据库，使用DATABASE( )函数：\\n\\nmysql> SELECT DATABASE();\\n ------------ \\n| DATABASE() |\\n ------------ \\n| menagerie  |\\n ------------ \\n如果你还没选择任何数据库，结果是NULL。\\n\\n为了找出当前的数据库包含什么表(例如，当你不能确定一个表的名字)，使用这个命令：\\n\\nmysql> SHOW TABLES;\\n --------------------- \\n| Tables in menagerie |\\n --------------------- \\n| event               |\\n| pet                 |\\n --------------------- \\n如果你想要知道一个表的结构，可以使用DESCRIBE命令；它显示表中每个列的信息：\\n\\nmysql> DESCRIBE pet;\\n --------- ------------- ------ ----- --------- ------- \\n| Field   | Type        | Null | Key | Default | Extra |\\n --------- ------------- ------ ----- --------- ------- \\n| name    | varchar(20) | YES  |     | NULL    |       |\\n| owner   | varchar(20) | YES  |     | NULL    |       |\\n| species | varchar(20) | YES  |     | NULL    |       |\\n| sex     | char(1)     | YES  |     | NULL    |       |\\n| birth   | date        | YES  |     | NULL    |       |\\n| death   | date        | YES  |     | NULL    |       |\\n --------- ------------- ------ ----- --------- ------- \\nField显示列名字，Type是列的数据类型，Null表示列是否能包含NULL值，Key显示列是否被索引而Default指定列的默认值。\\n\\n如果表有索引，SHOW INDEX FROM tbl_name生成有关索引的信息。\\n\\n3.5. 在批处理模式下使用mysql\\n在前面的章节中，你交互式地使用mysql输入查询并且查看结果。你也可以以批模式运行mysql。为了做到这些，把你想要运行的命令放在一个文件中，然后告诉mysql从文件读取它的输入：\\nshell> mysql < batch-file\\n如果在Windows下运行mysql，并且文件中有一些可以造成问题的特殊字符，可以这样操作：\\n\\nC:/> mysql -e \\"source batch-file\\"\\n如果你需要在命令行上指定连接参数，命令应为：\\n\\nshell> mysql -h host -u user -p < batch-file\\nEnter password: ********\\n当这样操作mysql时，则创建一个脚本文件，然后执行脚本。\\n\\n如果你想在语句出现错误的时候仍想继续执行脚本，则应使用--force命令行选项。\\n\\n为什么要使用一个脚本？有很多原因：\\n\\n如果你需要重复运行查询(比如说，每天或每周)，可以把它编成一个脚本，则每次执行时不必重新键入。\\n可以通过拷贝并编辑脚本文件从类似的现有的查询生成一个新查询。\\n当你正在开发查询时，批模式也是很有用的，特别对多行命令或多语句命令序列。如果你犯了一个错误，你不必重新输入所有内容，只需要编辑脚本来改正错误，然后告诉mysql再次执行脚本。\\n如果你有一个产生多个输出的查询，你可以通过一个分页器而不是盯着它翻屏到屏幕的顶端来运行输出：\\n·                shell> mysql < batch-file | more\\n你可以捕捉文件中的输出以便进行进一步的处理：\\n·                shell> mysql < batch-file > mysql.out\\n你可以将脚本分发给另外的人，以便他们也能运行命令。\\n某些情况不允许交互地使用，例如, 当你从一个cron任务中运行查询时。在这种情况下，你必须使用批模式。\\n当你以批模式运行mysql时，比起你交互地使用它时，其默认输出格式是不同的(更简明些)。例如，当交互式运行SELECT DISTINCT species FROM pet时，输出应为：\\n\\n \\n\\n --------- \\n| species |\\n --------- \\n| bird    |\\n| cat     |\\n| dog     |\\n| hamster |\\n| snake   |\\n --------- \\n但是当以批模式运行时，输出应为：\\n\\nspecies\\nbird\\ncat\\ndog\\nhamster\\nsnake\\n如果你想要在批模式中得到交互输出格式，使用mysql -t。为了回显以输出被执行的命令，使用mysql -vvv。\\n\\n你还可以使用源代码或 /.命令从mysql提示符运行脚本：\\n\\nmysql> source filename;\\nmysql> /. filename\\n3.6. 常用查询的例子\\n3.6.1. 列的最大值\\n3.6.2. 拥有某个列的最大值的行\\n3.6.3. 列的最大值：按组\\n3.6.4. 拥有某个字段的组间最大值的行\\n3.6.5. 使用用户变量\\n3.6.6. 使用外键\\n3.6.7. 根据两个键搜索\\n3.6.8. 根据天计算访问量\\n3.6.9. 使用AUTO_INCREMENT\\n下面是一些学习如何用MySQL解决一些常见问题的例子。\\n\\n在一些例子中，使用数据库表“shop”来储存某个商人（经销商）的每件物品(物品号)的价格。假定每个商人对每项物品有一个固定价格，那么(物品，商人)即为该记录的主关键字。\\n\\n启动命令行工具mysql并选择数据库：\\n\\nshell> mysql your-database-name\\n（在大多数MySQL中，你可以使用test数据库）。\\n\\n你可以使用以下语句创建示例表：\\n\\nmysql> CREATE TABLE shop (\\n    -> article INT(4) UNSIGNED ZEROFILL DEFAULT \\\'0000\\\' NOT NULL,\\n    -> dealer  CHAR(20)                 DEFAULT \\\'\\\'     NOT NULL,\\n    -> price   DOUBLE(16,2)             DEFAULT \\\'0.00\\\' NOT NULL,\\n    -> PRIMARY KEY(article, dealer));\\nmysql> INSERT INTO shop VALUES\\n    -> (1,\\\'A\\\',3.45),(1,\\\'B\\\',3.99),(2,\\\'A\\\',10.99),(3,\\\'B\\\',1.45),\\n    -> (3,\\\'C\\\',1.69),(3,\\\'D\\\',1.25),(4,\\\'D\\\',19.95);\\n执行语句后，表应包含以下内容：\\n\\nmysql> SELECT * FROM shop;\\n --------- -------- ------- \\n| article | dealer | price |\\n --------- -------- ------- \\n|    0001 | A      |  3.45 |\\n|    0001 | B      |  3.99 |\\n|    0002 | A      | 10.99 |\\n|    0003 | B      |  1.45 |\\n|    0003 | C      |  1.69 |\\n|    0003 | D      |  1.25 |\\n|    0004 | D      | 19.95 |\\n --------- -------- ------- \\n3.6.1. 列的最大值\\n“最大的物品号是什么？”\\n\\nSELECT MAX(article) AS article FROM shop;\\n\\n --------- \\n| article |\\n --------- \\n|       4 |\\n --------- \\n3.6.2. 拥有某个列的最大值的行\\n任务：找出最贵物品的编号、销售商和价格。\\n这很容易用一个子查询做到：\\n\\nSELECT article, dealer, price\\nFROM   shop\\nWHERE  price=(SELECT MAX(price) FROM shop);\\n另一个解决方案是按价格降序排序所有行并用MySQL特定LIMIT子句只得到第一行：\\n\\nSELECT article, dealer, price\\nFROM shop\\nORDER BY price DESC\\nLIMIT 1;\\n注:如果有多项最贵的物品( 例如每个的价格为19.95)，LIMIT解决方案仅仅显示其中一个！\\n\\n3.6.3. 列的最大值：按组\\n任务：每项物品的的最高价格是多少？\\n\\nSELECT article, MAX(price) AS price\\nFROM   shop\\nGROUP BY article\\n\\n --------- ------- \\n| article | price |\\n --------- ------- \\n|    0001 |  3.99 |\\n|    0002 | 10.99 |\\n|    0003 |  1.69 |\\n|    0004 | 19.95 |\\n --------- ------- \\n3.6.4. 拥有某个字段的组间最大值的行\\n任务：对每项物品，找出最贵价格的物品的经销商。\\n\\n可以用这样一个子查询解决该问题：\\n\\nSELECT article, dealer, price\\nFROM   shop s1\\nWHERE  price=(SELECT MAX(s2.price)\\n              FROM shop s2\\n              WHERE s1.article = s2.article);\\n3.6.5. 使用用户变量\\n你可以清空MySQL用户变量以记录结果，不必将它们保存到客户端的临时变量中。（参见 9.3节，“用户变量”.）。\\n\\n例如，要找出价格最高或最低的物品的，其方法是：\\n\\nmysql> <strong class=\\"userinput\\">SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop;</strong>\\nmysql> <strong class=\\"userinput\\">SELECT * FROM shop WHERE price=@min_price OR price=@max_price;</strong>\\n --------- -------- ------- \\n| article | dealer | price |\\n --------- -------- ------- \\n|    0003 | D      |  1.25 |\\n|    0004 | D      | 19.95 |\\n --------- -------- ------- \\n3.6.6. 使用外键\\n在MySQL中，InnoDB表支持对外部关键字约束条件的检查。参见15.2节，“InnoDB存储引擎”。还可以参见1.8.5.5节，“外键”。\\n\\n只是联接两个表时，不需要外部关键字。对于除InnoDB类型的表，当使用REFERENCES tbl_name(col_name)子句定义列时可以使用外部关键字，该子句没有实际的效果，只作为备忘录或注释来提醒，你目前正定义的列指向另一个表中的一个列。执行该语句时，实现下面很重要：\\n\\n·         MySQL不执行表tbl_name 中的动作，例如作为你正定义的表中的行的动作的响应而删除行；换句话说，该句法不会致使ON DELETE或ON UPDATE行为（如果你在REFERENCES子句中写入ON DELETE或ON UPDATE子句，将被忽略）。\\n\\n·         该句法可以创建一个column；但不创建任何索引或关键字。\\n\\n·         如果用该句法定义InnoDB表，将会导致错误。\\n\\n你可以使用作为联接列创建的列，如下所示：\\n\\nCREATE TABLE person (\\n    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\\n    name CHAR(60) NOT NULL,\\n    PRIMARY KEY (id)\\n);\\n \\nCREATE TABLE shirt (\\n    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\\n    style ENUM(\\\'t-shirt\\\', \\\'polo\\\', \\\'dress\\\') NOT NULL,\\n    color ENUM(\\\'red\\\', \\\'blue\\\', \\\'orange\\\', \\\'white\\\', \\\'black\\\') NOT NULL,\\n    owner SMALLINT UNSIGNED NOT NULL REFERENCES person(id),\\n    PRIMARY KEY (id)\\n);\\n \\nINSERT INTO person VALUES (NULL, \\\'Antonio Paz\\\');\\n \\nSELECT @last := LAST_INSERT_ID();\\n \\nINSERT INTO shirt VALUES\\n(NULL, \\\'polo\\\', \\\'blue\\\', @last),\\n(NULL, \\\'dress\\\', \\\'white\\\', @last),\\n(NULL, \\\'t-shirt\\\', \\\'blue\\\', @last);\\n \\nINSERT INTO person VALUES (NULL, \\\'Lilliana Angelovska\\\');\\n \\nSELECT @last := LAST_INSERT_ID();\\n \\nINSERT INTO shirt VALUES\\n(NULL, \\\'dress\\\', \\\'orange\\\', @last),\\n(NULL, \\\'polo\\\', \\\'red\\\', @last),\\n(NULL, \\\'dress\\\', \\\'blue\\\', @last),\\n(NULL, \\\'t-shirt\\\', \\\'white\\\', @last);\\n \\nSELECT * FROM person;\\n ---- --------------------- \\n| id | name                |\\n ---- --------------------- \\n|  1 | Antonio Paz         |\\n|  2 | Lilliana Angelovska |\\n ---- --------------------- \\n \\nSELECT * FROM shirt;\\n ---- --------- -------- ------- \\n| id | style   | color  | owner |\\n ---- --------- -------- ------- \\n|  1 | polo    | blue   |     1 |\\n|  2 | dress   | white  |     1 |\\n|  3 | t-shirt | blue   |     1 |\\n|  4 | dress   | orange |     2 |\\n|  5 | polo    | red    |     2 |\\n|  6 | dress   | blue   |     2 |\\n|  7 | t-shirt | white  |     2 |\\n ---- --------- -------- ------- \\n \\n \\nSELECT s.* FROM person p, shirt s\\n WHERE p.name LIKE \\\'Lilliana%\\\'\\n   AND s.owner = p.id\\n   AND s.color <> \\\'white\\\';\\n \\n ---- ------- -------- ------- \\n| id | style | color  | owner |\\n ---- ------- -------- ------- \\n|  4 | dress | orange |     2 |\\n|  5 | polo  | red    |     2 |\\n|  6 | dress | blue   |     2 |\\n ---- ------- -------- ------- \\n按照这种方式使用，REFERENCES子句不会显示在SHOW CREATE TABLE或DESCRIBE的输出中:\\n\\nSHOW CREATE TABLE shirt/G\\n*************************** 1. row ***************************\\nTable: shirt\\nCreate Table: CREATE TABLE `shirt` (\\n`id` smallint(5) unsigned NOT NULL auto_increment,\\n`style` enum(\\\'t-shirt\\\',\\\'polo\\\',\\\'dress\\\') NOT NULL,\\n`color` enum(\\\'red\\\',\\\'blue\\\',\\\'orange\\\',\\\'white\\\',\\\'black\\\') NOT NULL,\\n`owner` smallint(5) unsigned NOT NULL,\\nPRIMARY KEY  (`id`)\\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\\n在列定义中，按这种方式使用REFERENCES作为注释或“提示”适用于表MyISAM和BerkeleyDB。\\n\\n3.6.7. 根据两个键搜索\\n可以充分利用使用单关键字的OR子句，如同AND的处理。\\n\\n一个比较灵活的例子是寻找两个通过OR组合到一起的关键字：\\n\\nSELECT field1_index, field2_index FROM test_table\\nWHERE field1_index = \\\'1\\\' OR  field2_index = \\\'1\\\'\\n该情形是已经优化过的。参见7.2.6节，“索引合并优化”。\\n\\n还可以使用UNION将两个单独的SELECT语句的输出合成到一起来更有效地解决该问题。参见13.2.7.2节，“UNION语法\\n”。\\n\\n每个SELECT只搜索一个关键字，可以进行优化：\\n\\nSELECT field1_index, field2_index\\n    FROM test_table WHERE field1_index = \\\'1\\\'\\nUNION\\nSELECT field1_index, field2_index\\n    FROM test_table WHERE field2_index = \\\'1\\\';\\n3.6.8. 根据天计算访问量\\n下面的例子显示了如何使用位组函数来计算每个月中用户访问网页的天数。\\n\\nCREATE TABLE t1 (year YEAR(4), month INT(2) UNSIGNED ZEROFILL,\\n             day INT(2) UNSIGNED ZEROFILL);\\nINSERT INTO t1 VALUES(2000,1,1),(2000,1,20),(2000,1,30),(2000,2,2),\\n            (2000,2,23),(2000,2,23);\\n示例表中含有代表用户访问网页的年－月－日值。可以使用以下查询来确定每个月的访问天数：\\n\\nSELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1\\n       GROUP BY year,month;\\n将返回：\\n\\n ------ ------- ------ \\n| year | month | days |\\n ------ ------- ------ \\n| 2000 |    01 |    3 |\\n| 2000 |    02 |    2 |\\n ------ ------- ------ \\n该查询计算了在表中按年/月组合的不同天数，可以自动去除重复的询问。\\n\\n3.6.9. 使用AUTO_INCREMENT\\n可以通过AUTO_INCREMENT属性为新的行产生唯一的标识：\\n\\nCREATE TABLE animals (\\n     id MEDIUMINT NOT NULL AUTO_INCREMENT,\\n     name CHAR(30) NOT NULL,\\n     PRIMARY KEY (id)\\n );\\n \\nINSERT INTO animals (name) VALUES \\n    (\\\'dog\\\'),(\\\'cat\\\'),(\\\'penguin\\\'),\\n    (\\\'lax\\\'),(\\\'whale\\\'),(\\\'ostrich\\\');\\n \\nSELECT * FROM animals;\\n将返回：\\n\\n ---- --------- \\n| id | name    |\\n ---- --------- \\n|  1 | dog     |\\n|  2 | cat     |\\n|  3 | penguin |\\n|  4 | lax     |\\n|  5 | whale   |\\n|  6 | ostrich |\\n ---- --------- \\n你可以使用LAST_INSERT_ID()SQL函数或mysql_insert_id() C API函数来查询最新的AUTO_INCREMENT值。这些函数与具体连接有关，因此其返回值不会被其它执行插入功能的连接影响。\\n\\n注释：对于多行插入，LAST_INSERT_ID()和mysql_insert_id()从插入的第一行实际返回AUTO_INCREMENT关键字。在复制设置中，通过该函数可以在其它服务器上正确复制多行插入。\\n\\n对于MyISAM和BDB表，你可以在第二栏指定AUTO_INCREMENT以及多列索引。此时，AUTO_INCREMENT列生成的值的计算方法为：MAX(auto_increment_column)   1 WHERE prefix=given-prefix。如果想要将数据放入到排序的组中可以使用该方法。\\n\\nCREATE TABLE animals (\\n    grp ENUM(\\\'fish\\\',\\\'mammal\\\',\\\'bird\\\') NOT NULL,\\n    id MEDIUMINT NOT NULL AUTO_INCREMENT,\\n    name CHAR(30) NOT NULL,\\n    PRIMARY KEY (grp,id)\\n);\\n \\nINSERT INTO animals (grp,name) VALUES \\n    (\\\'mammal\\\',\\\'dog\\\'),(\\\'mammal\\\',\\\'cat\\\'),\\n    (\\\'bird\\\',\\\'penguin\\\'),(\\\'fish\\\',\\\'lax\\\'),(\\\'mammal\\\',\\\'whale\\\'),\\n    (\\\'bird\\\',\\\'ostrich\\\');\\n \\nSELECT * FROM animals ORDER BY grp,id;\\n将返回：\\n\\n -------- ---- --------- \\n| grp    | id | name    |\\n -------- ---- --------- \\n| fish   |  1 | lax     |\\n| mammal |  1 | dog     |\\n| mammal |  2 | cat     |\\n| mammal |  3 | whale   |\\n| bird   |  1 | penguin |\\n| bird   |  2 | ostrich |\\n -------- ---- --------- \\n请注意在这种情况下（AUTO_INCREMENT列是多列索引的一部分），如果你在任何组中删除有最大AUTO_INCREMENT值的行，将会重新用到AUTO_INCREMENT值。对于MyISAM表也如此,对于该表一般不重复使用AUTO_INCREMENT值。\\n\\n如果AUTO_INCREMENT列是多索引的一部分，MySQL将使用该索引生成以AUTO_INCREMENT列开始的序列值。。例如，如果animals表含有索引PRIMARY KEY (grp, id)和INDEX(id)，MySQL生成序列值时将忽略PRIMARY KEY。结果是，该表包含一个单个的序列，而不是符合grp值的序列。\\n\\n要想以AUTO_INCREMENT值开始而不是1，你可以通过CREATE TABLE或ALTER TABLE来设置该值，如下所示:\\n\\nmysql> ALTER TABLE tbl AUTO_INCREMENT = 100;\\n关于AUTO_INCREMENT的详细信息：\\n\\n·         如何为列指定AUTO_INCREMENT属性：13.1.5节，“CREATE TABLE语法”和 13.1.2节，“ALTER TABLE语法”。\\n\\n·         AUTO_INCREMENT的动作取决于SQL模式：5.3.2节，“SQL服务器模式”。\\n\\n·         找出含有最新AUTO_INCREMENT值的行：12.1.3节，“比较函数和操作符”。\\n\\n·         设置将用到的AUTO_INCREMENT值: 13.5.3节，“SET语法” 。\\n\\n·         AUTO_INCREMENT和复制：6.7节，“复制特性和已知问题”.\\n\\n·         AUTO_INCREMENT相关的可用于复制的Server-system变量(auto_increment_increment和auto_increment_offset)：5.3.3节，“服务器系统变量”。\\n\\n \\n\\n3.7. 孪生项目的查询\\n3.7.1. 查找所有未分发的孪生项\\n3.7.2. 显示孪生对状态的表\\n这个项目是Institute of Environmental Medicine at Karolinska Institutet Stockholm 和 the Section on Clinical Research in Aging and Psychology at the University of Southern California的合作项目。\\n\\n该项目包括筛选部分，即通过电话回访在瑞典超过 65 岁的所有孪生。满足某种标准的孪生进入下一阶段。在下一阶段中，医生/护士小组将访问想参加的孪生。部分检查包括物理检查和神经、心理检查、实验室试验、神经成像、心理状况评估和家族历史搜集。并且，应根据医疗和环境风险因素来搜集数据。\\n\\n可从以下链接找到孪生研究的更多信息：\\n\\nhttp://www.mep.ki.se/twinreg/index_en.html\\n\\n用一个用Perl和MySQL编写的web接口来管理项目的后面部分。\\n\\n每天晚上所有会谈的数据被移入一个MySQL数据库。\\n\\n3.7.1. 查找所有未分发的孪生项\\n下列查询用来决定谁进入项目的第二部分：\\n\\nSELECT\\n    CONCAT(p1.id, p1.tvab)   0 AS tvid,\\n    CONCAT(p1.christian_name, \\\' \\\', p1.surname) AS Name,\\n    p1.postal_code AS Code,\\n    p1.city AS City,\\n    pg.abrev AS Area,\\n    IF(td.participation = \\\'Aborted\\\', \\\'A\\\', \\\' \\\') AS A,\\n    p1.dead AS dead1,\\n    l.event AS event1,\\n    td.suspect AS tsuspect1,\\n    id.suspect AS isuspect1,\\n    td.severe AS tsevere1,\\n    id.severe AS isevere1,\\n    p2.dead AS dead2,\\n    l2.event AS event2,\\n    h2.nurse AS nurse2,\\n    h2.doctor AS doctor2,\\n    td2.suspect AS tsuspect2,\\n    id2.suspect AS isuspect2,\\n    td2.severe AS tsevere2,\\n    id2.severe AS isevere2,\\n    l.finish_date\\nFROM\\n    twin_project AS tp\\n    /* For Twin 1 */\\n    LEFT JOIN twin_data AS td ON tp.id = td.id\\n              AND tp.tvab = td.tvab\\n    LEFT JOIN informant_data AS id ON tp.id = id.id\\n              AND tp.tvab = id.tvab\\n    LEFT JOIN harmony AS h ON tp.id = h.id\\n              AND tp.tvab = h.tvab\\n    LEFT JOIN lentus AS l ON tp.id = l.id\\n              AND tp.tvab = l.tvab\\n    /* For Twin 2 */\\n    LEFT JOIN twin_data AS td2 ON p2.id = td2.id\\n              AND p2.tvab = td2.tvab\\n    LEFT JOIN informant_data AS id2 ON p2.id = id2.id\\n              AND p2.tvab = id2.tvab\\n    LEFT JOIN harmony AS h2 ON p2.id = h2.id\\n              AND p2.tvab = h2.tvab\\n    LEFT JOIN lentus AS l2 ON p2.id = l2.id\\n              AND p2.tvab = l2.tvab,\\n    person_data AS p1,\\n    person_data AS p2,\\n    postal_groups AS pg\\nWHERE\\n    /* p1 gets main twin and p2 gets his/her twin. */\\n    /* ptvab is a field inverted from tvab */\\n    p1.id = tp.id AND p1.tvab = tp.tvab AND\\n    p2.id = p1.id AND p2.ptvab = p1.tvab AND\\n    /* Just the screening survey */\\n    tp.survey_no = 5 AND\\n    /* Skip if partner died before 65 but allow emigration (dead=9) */\\n    (p2.dead = 0 OR p2.dead = 9 OR\\n     (p2.dead = 1 AND\\n      (p2.death_date = 0 OR\\n       (((TO_DAYS(p2.death_date) - TO_DAYS(p2.birthday)) / 365)\\n        >= 65))))\\n    AND\\n    (\\n    /* Twin is suspect */\\n    (td.future_contact = \\\'Yes\\\' AND td.suspect = 2) OR\\n    /* Twin is suspect - Informant is Blessed */\\n    (td.future_contact = \\\'Yes\\\' AND td.suspect = 1\\n                               AND id.suspect = 1) OR\\n    /* No twin - Informant is Blessed */\\n    (ISNULL(td.suspect) AND id.suspect = 1\\n                        AND id.future_contact = \\\'Yes\\\') OR\\n    /* Twin broken off - Informant is Blessed */\\n    (td.participation = \\\'Aborted\\\'\\n     AND id.suspect = 1 AND id.future_contact = \\\'Yes\\\') OR\\n    /* Twin broken off - No inform - Have partner */\\n    (td.participation = \\\'Aborted\\\' AND ISNULL(id.suspect)\\n                                  AND p2.dead = 0))\\n    AND\\n    l.event = \\\'Finished\\\'\\n    /* Get at area code */\\n    AND SUBSTRING(p1.postal_code, 1, 2) = pg.code\\n    /* Not already distributed */\\n    AND (h.nurse IS NULL OR h.nurse=00 OR h.doctor=00)\\n    /* Has not refused or been aborted */\\n    AND NOT (h.status = \\\'Refused\\\' OR h.status = \\\'Aborted\\\'\\n    OR h.status = \\\'Died\\\' OR h.status = \\\'Other\\\')\\nORDER BY\\n    tvid;\\n一些解释：\\n\\n·         CONCAT(p1.id, p1.tvab)   0 AS tvid\\n\\n我们想要在id和tvab的连接上以数字顺序排序。结果加0使得MySQL把结果变为一个数字。\\n\\n·         列id\\n\\n这标识一对孪生。它是所有表中的一个键。\\n\\n·         列tvab\\n\\n这标识孪生中的一个。它的值为1或2。\\n\\n·         列ptvab\\n\\n这是tvab的一个逆运算。当tvab是1，它是2，反之亦然。它用来保存输入并且使MySQL的优化查询更容易。\\n\\n这个查询表明，怎样用联结(p1和p2)从同一个表中查找表。在例子中，这被用来检查孪生的一个是否在65岁前死了。如果如此，行不返回值。\\n\\n上述所有孪生信息存在于所有表中。我们对id,tvab（所有表）和id,ptvab (person_data) 上采用键以使查询更快。\\n\\n在我们的生产机器上(一台200MHz UltraSPARC)，这个查询返回大约 150-200 行并且时间不超过一秒。\\n\\n表\\n\\n行数\\n\\nperson_data\\n\\n71074\\n\\nlentus\\n\\n5291\\n\\ntwin_project\\n\\n5286\\n\\ntwin_data\\n\\n2012\\n\\ninformant_data\\n\\n663\\n\\nharmony\\n\\n381\\n\\npostal_groups\\n\\n100\\n\\n3.7.2. 显示孪生对状态的表\\n每一次会面以一个称为event的状态码结束。下面显示的查询被用来显示按事件组合的所有孪生的表。这表明多少对孪生已经完成，多少对的其中之一已完成而另一个拒绝了，等等。\\nSELECT\\n        t1.event,\\n        t2.event,\\n        COUNT(*)\\nFROM\\n        lentus AS t1,\\n        lentus AS t2,\\n        twin_project AS tp\\nWHERE\\n        /* We are looking at one pair at a time */\\n        t1.id = tp.id\\n        AND t1.tvab=tp.tvab\\n        AND t1.id = t2.id\\n        /* Just the screening survey */\\n        AND tp.survey_no = 5\\n        /* This makes each pair only appear once */\\n        AND t1.tvab=\\\'1\\\' AND t2.tvab=\\\'2\\\'\\nGROUP BY\\n        t1.event, t2.event;\\n3.8. 与Apache一起使用MySQL\\n还有一些项目，你可以从MySQL数据库鉴别用户，并且你还可以将日志文件写入MySQL数据库表。\\n你可以将以下内容放到Apache配置文件中，更改Apache日志格式，使MySQL更容易读取：\\n\\nLogFormat /\\n        \\"/\\"%h/\\",%{%Y%m%d%H%M%S}t,%>s,/\\"%b/\\",/\\"%{Content-Type}o/\\",  /\\n        /\\"%U/\\",/\\"%{Referer}i/\\",/\\"%{User-Agent}i/\\"\\"\\n要想将该格式的日志文件装载到MySQL，你可以使用以下语句:\\n\\nLOAD DATA INFILE \\\'/local/access_log\\\' INTO TABLE tbl_name\\nFIELDS TERMINATED BY \\\',\\\' OPTIONALLY ENCLOSED BY \\\'\\"\\\' ESCAPED BY \\\'//\\\'\\n所创建的表中的列应与写入日志文件的LogFormat行对应。\\n\\n\',1,\'0\',NOW()) ' }
[2018-04-10T18:09:53.414] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN  group by year' }
[2018-04-10T18:10:03.462] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN  group by year' }
[2018-04-10T18:10:03.474] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year,article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN' }
[2018-04-10T18:10:21.068] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year,article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN' }
[2018-04-10T18:10:21.076] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN  group by year' }
[2018-04-10T18:10:28.145] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN  group by year' }
[2018-04-10T18:10:28.167] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year,article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN' }
[2018-04-10T18:11:53.751] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN  group by year' }
[2018-04-10T18:11:53.769] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year,article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN' }
[2018-04-10T18:11:56.772] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year,article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN' }
[2018-04-10T18:11:56.788] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN  group by year' }
[2018-04-10T18:12:04.115] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year,article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=NaN and tag.id=NaN' }
[2018-04-10T18:22:36.757] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'id' in order clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'id\' in order clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=1 and tag.id=12  group by year  order by id desc' }
[2018-04-10T18:22:47.077] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'id' in order clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'id\' in order clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'SELECT date_format(createtime,\'%Y\') as year from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where ishidden=0 and userid=1 and tag.id=12  group by year  order by id desc' }
[2018-04-12T13:48:22.031] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'userid' in where clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'userid\' in where clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where userid=\'1\' and ishidden=0  order by createtime desc limit 0,9' }
[2018-04-12T13:48:22.067] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'userid' in where clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'userid\' in where clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'SELECT article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where article.createtime=(select max(createtime) as createtime from article) and ishidden=0 and userid=\'1\'' }
[2018-04-12T13:48:22.142] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'userid' in where clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'userid\' in where clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'SELECT article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where article.createtime=(select max(createtime) as createtime from article) and ishidden=0 and userid=\'1\'' }
[2018-04-12T13:48:22.231] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'userid' in where clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'userid\' in where clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where userid=\'1\' and ishidden=0  order by createtime desc limit 0,9' }
[2018-04-12T13:51:11.806] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'userid' in where clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'userid\' in where clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where userid=1  order by createtime desc limit 0,9' }
[2018-04-12T13:51:11.834] [ERROR] articleDao - { Error: ER_NON_UNIQ_ERROR: Column 'userid' in where clause is ambiguous
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_NON_UNIQ_ERROR',
  errno: 1052,
  sqlMessage: 'Column \'userid\' in where clause is ambiguous',
  sqlState: '23000',
  index: 0,
  sql: 'select count(a.id) as count from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id   where userid=1' }
[2018-04-12T14:22:37.157] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '-9,9' at line 1
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'-9,9\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where a.userid=1 and ta.tag_id=NaN  order by createtime desc limit -9,9' }
[2018-04-12T14:22:37.180] [ERROR] articleDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'NaN' in 'where clause'
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'NaN\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select count(a.id) as count from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id   where a.userid=1 and ta.tag_id=NaN' }
[2018-04-12T14:22:42.497] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '-9,9' at line 1
    at Query.Sequence._packetToError (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    at Protocol._enqueue (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (D:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
From previous event:
    at PoolConnection.promiseCallback (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (D:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (D:/H5/Myblog/nodejs/myblog/service/mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'-9,9\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where a.userid=1  order by createtime desc limit -9,9' }
[2018-04-12T21:25:58.298] [ERROR] userDao - { Error: ER_BAD_FIELD_ERROR: Unknown column 'id1' in 'where clause'
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_BAD_FIELD_ERROR',
  errno: 1054,
  sqlMessage: 'Unknown column \'id1\' in \'where clause\'',
  sqlState: '42S22',
  index: 0,
  sql: 'select * from users s where id1 ' }
[2018-04-12T21:38:08.183] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'desc='程序媛一枚，热爱编程，酷爱前端，爱钻研，爱分享',loc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'desc=\'程序媛一枚，热爱编程，酷爱前端，爱钻研，爱分享\',loc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'update basic set domain=\'www.janneyhu.top\',blogname=\'janneyhu博客\',author=\'janneyhu博客\',email=\'janneyhu博客\',desc=\'程序媛一枚，热爱编程，酷爱前端，爱钻研，爱分享\',location=\'北京\',logo=\'1\',footer=\'本博客为janneyhu个人记录所用，引用请标明出处\',viewcount=\'999\' where userid=1' }
[2018-04-12T21:39:22.085] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'desc='程序媛一枚，热爱编程，酷爱前端，爱钻研，爱分享',loc' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'desc=\'程序媛一枚，热爱编程，酷爱前端，爱钻研，爱分享\',loc\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'update basic set domain=\'www.janneyhu.top\',blogname=\'janneyhu博客\',author=\'janneyhu博客\',email=\'janneyhu博客\',desc=\'程序媛一枚，热爱编程，酷爱前端，爱钻研，爱分享\',location=\'北京\',logo=\'1\',footer=\'本博客为janneyhu个人记录所用，引用请标明出处\',viewcount=\'999\' where userid=1' }
[2018-04-12T21:42:43.269] [ERROR] helper - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'desc='qewr',location='we',logo='e',footer='w',viewcount=100 where userid=1' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'desc=\'qewr\',location=\'we\',logo=\'e\',footer=\'w\',viewcount=100 where userid=1\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'update basic set domain=\'weqwerqwerqwe\',blogname=\'qwer\',author=\'qwer\',email=\'qwer\',desc=\'qewr\',location=\'we\',logo=\'e\',footer=\'w\',viewcount=100 where userid=1' }
[2018-04-13T09:44:45.975] [ERROR] basicDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.findbydomain (d:\H5\Myblog\nodejs\myblog\service\basicDao.js:25:38)
    at Article.getuseridbydomain (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:331:35)
    at Article.getlastblog (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:342:27)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-04-13T09:44:46.005] [ERROR] articleDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.getlastblog (d:\H5\Myblog\nodejs\myblog\service\articleDao.js:141:38)
    at Article.getlastblog (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:343:39)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-04-13T09:46:00.895] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 2
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: 'SELECT article.*,tag.id as tagid ,tag.name as tagname from article LEFT JOIN tag_article on article.id=tag_article.article_id LEFT JOIN tag on tag.id=tag_article.tag_id\n        where article.createtime=(select max(createtime) as createtime from article) and ishidden=0 and article.userid=' }
[2018-04-13T09:46:00.916] [ERROR] articleDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and ishidden=0  order by createtime desc limit 0,9' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'and ishidden=0  order by createtime desc limit 0,9\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select a.*,ta.tag_id as tagid,t.name as tagname from article a LEFT JOIN tag_article ta  on  a.id=ta.article_id  LEFT JOIN tag t on  t.id=ta.tag_id  where a.userid= and ishidden=0  order by createtime desc limit 0,9' }
[2018-04-13T09:46:21.307] [ERROR] tagDao - { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'order by id desc limit 0,10' at line 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:29:32)
    at <anonymous>
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'order by id desc limit 0,10\' at line 1',
  sqlState: '42000',
  index: 0,
  sql: 'select * from tag  where userid=   order by id desc limit 0,10' }
[2018-04-21T13:36:23.292] [ERROR] basicDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.findbydomain (d:\H5\Myblog\nodejs\myblog\service\basicDao.js:25:38)
    at getsearch (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:345:43)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-28T14:58:24.906] [ERROR] basicDao - { Error: connect ETIMEDOUT
    at PoolConnection.Connection._handleConnectTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:419:13)
    at Object.onceWrapper (events.js:313:30)
    at emitNone (events.js:106:13)
    at Socket.emit (events.js:208:7)
    at Socket._onTimeout (net.js:420:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.findbydomain (d:\H5\Myblog\nodejs\myblog\service\basicDao.js:25:38)
    at getinfobydomain (d:\H5\Myblog\nodejs\myblog\controller\basicContro.js:98:43)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  errorno: 'ETIMEDOUT',
  code: 'ETIMEDOUT',
  syscall: 'connect',
  fatal: true }
[2018-08-28T14:58:24.940] [ERROR] basicDao - { Error: connect ETIMEDOUT
    at PoolConnection.Connection._handleConnectTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:419:13)
    at Object.onceWrapper (events.js:313:30)
    at emitNone (events.js:106:13)
    at Socket.emit (events.js:208:7)
    at Socket._onTimeout (net.js:420:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.findbydomain (d:\H5\Myblog\nodejs\myblog\service\basicDao.js:25:38)
    at Article.getlastblog (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:377:43)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  errorno: 'ETIMEDOUT',
  code: 'ETIMEDOUT',
  syscall: 'connect',
  fatal: true }
[2018-08-28T15:03:04.406] [ERROR] tagDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at Pool.releaseConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:157:10)
    at Pool._removeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:277:8)
    at Pool._purgeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:258:8)
    at Ping.onOperationComplete [as _callback] (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:101:12)
    at Ping.Sequence.end (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:88:24)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:398:18
    at Array.forEach (<anonymous>)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:397:13
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-28T15:03:04.415] [ERROR] articleDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at Pool.releaseConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:157:10)
    at Pool._removeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:277:8)
    at Pool._purgeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:258:8)
    at Ping.onOperationComplete [as _callback] (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:101:12)
    at Ping.Sequence.end (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:88:24)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:398:18
    at Array.forEach (<anonymous>)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:397:13
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-28T15:03:04.423] [ERROR] articleDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at Pool.releaseConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:157:10)
    at Pool._removeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:277:8)
    at Pool._purgeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:258:8)
    at Ping.onOperationComplete [as _callback] (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:101:12)
    at Ping.Sequence.end (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:88:24)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:398:18
    at Array.forEach (<anonymous>)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:397:13
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-28T15:03:04.439] [ERROR] basicDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at Pool.releaseConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:157:10)
    at Pool._removeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:277:8)
    at Pool._purgeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:258:8)
    at Ping.onOperationComplete [as _callback] (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:101:12)
    at Ping.Sequence.end (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:88:24)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:398:18
    at Array.forEach (<anonymous>)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:397:13
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-28T15:03:04.447] [ERROR] articleDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at Pool.releaseConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:157:10)
    at Pool._removeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:277:8)
    at Pool._purgeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:258:8)
    at Ping.onOperationComplete [as _callback] (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:101:12)
    at Ping.Sequence.end (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:88:24)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:398:18
    at Array.forEach (<anonymous>)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:397:13
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-28T18:39:58.730] [ERROR] basicDao - { Error: connect ETIMEDOUT
    at PoolConnection.Connection._handleConnectTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:419:13)
    at Object.onceWrapper (events.js:313:30)
    at emitNone (events.js:106:13)
    at Socket.emit (events.js:208:7)
    at Socket._onTimeout (net.js:420:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.findbydomain (d:\H5\Myblog\nodejs\myblog\service\basicDao.js:25:38)
    at getinfobydomain (d:\H5\Myblog\nodejs\myblog\controller\basicContro.js:98:43)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  errorno: 'ETIMEDOUT',
  code: 'ETIMEDOUT',
  syscall: 'connect',
  fatal: true }
[2018-08-28T18:39:58.781] [ERROR] basicDao - { Error: connect ETIMEDOUT
    at PoolConnection.Connection._handleConnectTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:419:13)
    at Object.onceWrapper (events.js:313:30)
    at emitNone (events.js:106:13)
    at Socket.emit (events.js:208:7)
    at Socket._onTimeout (net.js:420:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at Pool.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\pool.js:10:28)
    at Object.aQuery (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:27:31)
    at Object.findbydomain (d:\H5\Myblog\nodejs\myblog\service\basicDao.js:25:38)
    at Article.getlastblog (d:\H5\Myblog\nodejs\myblog\controller\articleContro.js:377:43)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:137:13)
    at Route.dispatch (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\route.js:112:3)
    at Layer.handle [as handle_request] (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\layer.js:95:5)
    at d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:281:22
    at Function.process_params (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:335:12)
    at next (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:275:10)
    at Function.handle (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:174:3)
    at router (d:\H5\Myblog\nodejs\myblog\node_modules\express\lib\router\index.js:47:12)
  errorno: 'ETIMEDOUT',
  code: 'ETIMEDOUT',
  syscall: 'connect',
  fatal: true }
[2018-08-28T18:42:40.368] [ERROR] articleDao - { Error: Handshake inactivity timeout
    at Handshake.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:164:17)
    at emitNone (events.js:106:13)
    at Handshake.emit (events.js:208:7)
    at Handshake._onTimeout (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:129:8)
    at ontimeout (timers.js:482:11)
    at tryOnTimeout (timers.js:317:5)
    at Timer.listOnTimeout (timers.js:277:5)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at Protocol.handshake (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:52:23)
    at PoolConnection.connect (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:130:18)
    at Pool.getConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:48:16)
    at Pool.releaseConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:157:10)
    at Pool._removeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:277:8)
    at Pool._purgeConnection (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:258:8)
    at Ping.onOperationComplete [as _callback] (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Pool.js:101:12)
    at Ping.Sequence.end (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:88:24)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:398:18
    at Array.forEach (<anonymous>)
    at d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:397:13
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
  code: 'PROTOCOL_SEQUENCE_TIMEOUT',
  fatal: true,
  timeout: 10000 }
[2018-08-31T20:32:23.444] [ERROR] helper - { Error: ER_DATA_TOO_LONG: Data too long for column 'content' at row 1
    at Query.Sequence._packetToError (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Sequence.js:52:14)
    at Query.ErrorPacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:279:23)
    at Parser.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:39:16)
    at Socket.<anonymous> (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:103:28)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\protocol\Protocol.js:145:48)
    at PoolConnection.query (d:\H5\Myblog\nodejs\myblog\node_modules\mysql\lib\Connection.js:208:25)
    at d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:16:24
    at Promise._execute (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\debuggability.js:303:9)
    at Promise._resolveFromExecutor (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:483:18)
    at new Promise (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\node_modules\bluebird\js\release\promise.js:79:10)
    at PoolConnection.promiseCallback (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\helper.js:6:10)
    at poolConnection.connection.query (d:\H5\Myblog\nodejs\myblog\node_modules\promise-mysql\lib\connection.js:64:28)
    at Object.aExecute (d:\H5\Myblog\nodejs\myblog\service\mysqlHelper.js:58:32)
    at <anonymous>
  code: 'ER_DATA_TOO_LONG',
  errno: 1406,
  sqlMessage: 'Data too long for column \'content\' at row 1',
  sqlState: '22001',
  index: 0,
  sql: 'insert into article values (NULL,\'Ajax和跨域\',\'Ajax和跨域\',\'<h1 style=\\"margin: 10px 0px; padding-top: 5px; font-size: 28px; line-height: 1.5;\\">1.使用：</h1><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><span style=\\"line-height: 1.5;\\">ie是第一款引入XHR对象的浏览器,ie7+只要一句，var xhr=new XMLHttpRequest();就可以了。</span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><span style=\\"line-height: 1.5;\\">1、创建异步对象</span></p><p><span style=\\"margin-right: 1em !important;\\"><a href=\\"https://www.cnblogs.com/wanglao/p/3558049.html#\\" class=\\"toolbar_item command_expandSource expandSource\\" style=\\"color: blue !important; text-decoration: none !important; border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; text-align: center !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; display: inline !important; background: none !important;\\">+ View Code</a></span><span style=\\"margin-right: 1em !important;\\"></span></p><h1 style=\\"margin: 10px 0px; padding-top: 5px; font-size: 28px; line-height: 1.5;\\">2提交</h1><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><strong><span style=\\"line-height: 1.5;\\">get提交：</span></strong></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;</p><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-size: 14px; line-height: 25.2px; background-color: rgb(255, 255, 255);\\">xhr.open(&quot;GET&quot;,&nbsp;&quot;Ajax.ashx?id=&quot;&nbsp;+&nbsp;id,&nbsp;true);</pre><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-size: 14px; line-height: 25.2px; background-color: rgb(255, 255, 255);\\">objXMLHttp.send(null);</pre><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><strong><span style=\\"line-height: 1.5;\\">post提交：</span></strong></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><span style=\\"line-height: 1.5;\\">为了使得服务器像表单那样去处理，采用模拟Content-Type头的方式：</span></p><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-size: 14px; line-height: 25.2px; background-color: rgb(255, 255, 255);\\">xhr.setRequestHeader(&quot;Content-Type&quot;,&nbsp;&quot;application/x-www-form-urlencoded&quot;);</pre><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;发送</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">xhr.send(ser);</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">可以将ser序列化之后在发送给服务器,序列化的方法：</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">JSON.stringify(js对象);//将js对象转化为json字符串</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">JSON.parse();//与上面相反</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><strong>处理</strong></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">定义回调函数与异步监听</p><p><span style=\\"margin-right: 1em !important;\\"><a href=\\"https://www.cnblogs.com/wanglao/p/3558049.html#\\" class=\\"toolbar_item command_expandSource expandSource\\" style=\\"color: blue !important; text-decoration: none !important; border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; text-align: center !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; display: inline !important; background: none !important;\\">+ View Code</a></span><span style=\\"margin-right: 1em !important;\\"></span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">load事件：IE8+和其他都支持，接收到完整数据时触发</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">process事件：用于监听接收数据的进度</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">完整的</p><p><img id=\\"code_img_closed_c38cf2b0-4daf-458a-9b44-4900083d8bc1\\" class=\\"code_img_closed\\" src=\\"https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\\" alt=\\"\\"/>&nbsp;<span class=\\"cnblogs_code_collapse\\" style=\\"border: 1px solid gray; padding: 2px; line-height: 1.5 !important; background-color: rgb(255, 255, 255);\\">View Code</span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;</p><h1 style=\\"margin: 10px 0px; padding-top: 5px; font-size: 28px; line-height: 1.5;\\">jquery中ajax</h1><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">jquery提供了$.ajax,$.get(),$.post()等方法</p><table width=\\"1567\\" style=\\"width: 793px;\\"><tbody style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; background: none !important;\\"><tr style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; background: none !important;\\" class=\\"firstRow\\"><td class=\\"gutter\\" style=\\"border-color: silver; padding: 3px; border-collapse: collapse; border-radius: 0px !important; bottom: auto !important; float: none !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; min-height: auto !important; color: rgb(175, 175, 175) !important; background: none !important;\\" width=\\"35\\"><div class=\\"line number1 index0 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">1</div><div class=\\"line number2 index1 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">2</div><div class=\\"line number3 index2 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">3</div><div class=\\"line number4 index3 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">4</div><div class=\\"line number5 index4 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">5</div><div class=\\"line number6 index5 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">6</div><div class=\\"line number7 index6 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">7</div><div class=\\"line number8 index7 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">8</div><div class=\\"line number9 index8 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">9</div><div class=\\"line number10 index9 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">10</div><div class=\\"line number11 index10 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">11</div><div class=\\"line number12 index11 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">12</div><div class=\\"line number13 index12 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">13</div><div class=\\"line number14 index13 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">14</div><div class=\\"line number15 index14 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">15</div><div class=\\"line number16 index15 alt1\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\">16</div><div class=\\"line number17 index16 alt2\\" style=\\"border-radius: 0px !important; border-width: 0px 2px 0px 0px !important; border-right-style: solid !important; border-right-color: rgb(108, 226, 108) !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 0.5em !important; position: static !important; right: auto !important; text-align: right !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\">17</div></td><td class=\\"code\\" style=\\"border-color: silver; padding: 3px; border-collapse: collapse; border-radius: 0px !important; bottom: auto !important; float: none !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; box-sizing: content-box !important; min-height: auto !important; background: none !important;\\" width=\\"NaN\\"><div class=\\"line number1 index0 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">$.ajax({</code></div><div class=\\"line number2 index1 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">url:&nbsp;</code><code class=\\"javascript string\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: blue !important; background: none !important;\\">&quot;/CommonService.asmx/SayHello&quot;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">,</code></div><div class=\\"line number3 index2 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">type:&nbsp;</code><code class=\\"javascript string\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: blue !important; background: none !important;\\">&quot;Post&quot;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">,</code></div><div class=\\"line number4 index3 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">dataType:&nbsp;</code><code class=\\"javascript string\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: blue !important; background: none !important;\\">&quot;json&quot;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">,</code></div><div class=\\"line number5 index4 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">contentType:&nbsp;</code><code class=\\"javascript string\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: blue !important; background: none !important;\\">&quot;application/json; charset=utf-8&quot;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">,</code></div><div class=\\"line number6 index5 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">data:&nbsp;</code><code class=\\"javascript string\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: blue !important; background: none !important;\\">&quot;{name:&#39;Varchar32&#39;}&quot;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">,</code></div><div class=\\"line number7 index6 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">success:&nbsp;</code><code class=\\"javascript keyword\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: rgb(0, 0, 255) !important; background: none !important;\\">function</code>&nbsp;<code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">(data) {</code></div><div class=\\"line number8 index7 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">alert(data.d);</code></div><div class=\\"line number9 index8 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">},</code></div><div class=\\"line number10 index9 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">error:&nbsp;</code><code class=\\"javascript keyword\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: rgb(0, 0, 255) !important; background: none !important;\\">function</code>&nbsp;<code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">(data) {</code></div><div class=\\"line number11 index10 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript comments\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: rgb(0, 130, 0) !important; background: none !important;\\">//200的响应也有可能被认定为error，responseText中没有Message部分</code></div><div class=\\"line number12 index11 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">alert($.parseJSON(data.responseText).Message);</code></div><div class=\\"line number13 index12 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">},</code></div><div class=\\"line number14 index13 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">complete:&nbsp;</code><code class=\\"javascript keyword\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: rgb(0, 0, 255) !important; background: none !important;\\">function</code>&nbsp;<code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">(data) {</code></div><div class=\\"line number15 index14 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">;</code><code class=\\"javascript comments\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; color: rgb(0, 130, 0) !important; background: none !important;\\">//after success or error</code></div><div class=\\"line number16 index15 alt1\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background-image: none !important; background-attachment: initial !important; background-size: initial !important; background-origin: initial !important; background-clip: initial !important; background-position: initial !important; background-repeat: initial !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">}</code></div><div class=\\"line number17 index16 alt2\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px 1em !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; min-height: auto !important; white-space: nowrap !important; background: none rgb(244, 244, 244) !important;\\"><code class=\\"javascript spaces\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">&nbsp;</code><code class=\\"javascript plain\\" style=\\"border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.8em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-family: Consolas, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, Courier, monospace !important; min-height: auto !important; background: none !important;\\">});</code></div></td></tr></tbody></table><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;到这里还要特别介绍一个插件:jQuery.form插件，官网：<a href=\\"http://malsup.com/jquery/form/\\" style=\\"color: rgb(29, 88, 209); text-decoration: none;\\">http://malsup.com/jquery/form/</a>它在jquery调用webservice中很好使用</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">使用：<a href=\\"http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html\\" style=\\"color: rgb(29, 88, 209); text-decoration: none;\\">http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html</a>和<a href=\\"http://www.cnblogs.com/fish-li/archive/2013/01/13/2858599.html#_label3\\" style=\\"color: rgb(29, 88, 209); text-decoration: none;\\">http://www.cnblogs.com/fish-li/archive/2013/01/13/2858599.html#_label3</a></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">它的ajaxForm直接提交整个表单，而且还能根据name标示来选择不同的方法提交，提交各种复杂表单。</p><h1 style=\\"margin: 10px 0px; padding-top: 5px; font-size: 28px; line-height: 1.5;\\">名词解释</h1><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">CSRF（Cross-Site Request Forgery,跨站点请求伪造）</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">CORS(Cross-Origin Resource Sharing ,跨域资源共享)</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;SSE(Server-Sent Events,服务器发送事件)</p><h1 style=\\"margin: 10px 0px; padding-top: 5px; font-size: 28px; line-height: 1.5;\\">跨域</h1><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><strong>原因：</strong>同源策略（XHR对象只能访问包含它的页面位于同一个域中的资源，协议域名端口相同）</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><strong>方法：</strong></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">1.服务器段设置</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">Access-Control-Allow-Origin:* 代表所有域名都可以访问到<br/>Access-Control-Allow-Origin: http://www.cnblogs.com 限定了域名</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">2.图像ping</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">使用&lt;img&gt;标签，这种技术在大访问量的页面上可以将图片设为其他服务器上，降低服务器压力</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">3.JSONP</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">利用&lt;script&gt;可以作为一种很好的跨域方案。</p><p><span style=\\"margin-right: 1em !important;\\"><a href=\\"https://www.cnblogs.com/wanglao/p/3558049.html#\\" class=\\"toolbar_item command_expandSource expandSource\\" style=\\"color: blue !important; text-decoration: none !important; border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; text-align: center !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; display: inline !important; background: none !important;\\">+ View Code</a></span><span style=\\"margin-right: 1em !important;\\"></span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">必须指定回调函数这里指定responsejs</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">服务器端则必须返回一段js脚本，如json对象数组定义的脚本</p><p><span style=\\"margin-right: 1em !important;\\"><a href=\\"https://www.cnblogs.com/wanglao/p/3558049.html#\\" class=\\"toolbar_item command_expandSource expandSource\\" style=\\"color: blue !important; text-decoration: none !important; border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; text-align: center !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; display: inline !important; background: none !important;\\">+ View Code</a></span><span style=\\"margin-right: 1em !important;\\"></span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">然后判断这个脚本加载完毕(可以利用这个调用百度搜索：Script.src&nbsp;<span class=\\"keyword operator\\">=</span>&nbsp;<span class=\\"string\\">&#39;http://suggestion.baidu.com/su?wd=&#39;</span><span class=\\"keyword operator\\">+</span>oTxt.value<span class=\\"keyword operator\\">+</span>&#39;<span class=\\"keyword operator\\">&amp;</span>p<span class=\\"keyword operator\\">=</span><span class=\\"constant numeric\\">3</span><span class=\\"keyword operator\\">&amp;</span>cb<span class=\\"keyword operator\\">=</span>baidu<span class=\\"keyword operator\\">&amp;</span>from<span class=\\"keyword operator\\">=</span>superpage&#39;)</p><p><span style=\\"margin-right: 1em !important;\\"><a href=\\"https://www.cnblogs.com/wanglao/p/3558049.html#\\" class=\\"toolbar_item command_expandSource expandSource\\" style=\\"color: blue !important; text-decoration: none !important; border-radius: 0px !important; border: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; margin: 0px !important; outline: 0px !important; overflow: visible !important; padding: 0px !important; position: static !important; right: auto !important; text-align: center !important; top: auto !important; vertical-align: baseline !important; width: auto !important; box-sizing: content-box !important; font-size: 12px !important; min-height: auto !important; display: inline !important; background: none !important;\\">+ View Code</a></span><span style=\\"margin-right: 1em !important;\\"></span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">4.iframe+document.domain方式</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\"><span class=\\"highlight\\">　　对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决</span>。具体的做法是可以在http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上document.domain = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以“交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com那显然是会报错地！代码如下：</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">www.a.com上的a.html</p><p><span class=\\"cnblogs_code_copy\\" style=\\"padding-right: 5px; line-height: 1.5 !important;\\"><a title=\\"复制代码\\" style=\\"color: rgb(29, 88, 209); border: none !important;\\"><img src=\\"https://common.cnblogs.com/images/copycode.gif\\" alt=\\"复制代码\\"/></a></span></p><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-family: &#39;Courier New&#39; !important;\\">document.domain&nbsp;=&nbsp;&#39;a.com&#39;;var&nbsp;ifr&nbsp;=&nbsp;document.createElement(&#39;iframe&#39;);\\nifr.src&nbsp;=&nbsp;&#39;http://script.a.com/b.html&#39;;\\nifr.style.display&nbsp;=&nbsp;&#39;none&#39;;\\ndocument.body.appendChild(ifr);\\nifr.onload&nbsp;=&nbsp;function(){&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;doc&nbsp;=&nbsp;ifr.contentDocument&nbsp;||&nbsp;ifr.contentWindow.document;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在这里操纵b.html\\n&nbsp;&nbsp;&nbsp;&nbsp;alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);\\n};</pre><p><span class=\\"cnblogs_code_copy\\" style=\\"padding-right: 5px; line-height: 1.5 !important;\\"><a title=\\"复制代码\\" style=\\"color: rgb(29, 88, 209); border: none !important;\\"><img src=\\"https://common.cnblogs.com/images/copycode.gif\\" alt=\\"复制代码\\"/></a></span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">script.a.com上的b.html</p><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-family: &#39;Courier New&#39; !important;\\">document.domain&nbsp;=&nbsp;&#39;a.com&#39;;</pre><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">5.jquery中封装的$.get()，和$.ajax()的get模式可以跨域，还有$.getJSON()方法</p><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-family: &#39;Courier New&#39; !important;\\">&nbsp;$.getJSON(&quot;http://localhost:12500/CommonService.asmx/GetGenderByName?name=Varchar32&amp;callback=?&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;(data)&nbsp;{\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;in&nbsp;success&quot;&nbsp;+&nbsp;&quot;：&quot;&nbsp;+&nbsp;data.name&nbsp;+&nbsp;&quot;，&nbsp;性别&quot;&nbsp;+&nbsp;data.gender);\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</pre><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;</p><h1 style=\\"margin: 10px 0px; padding-top: 5px; font-size: 28px; line-height: 1.5;\\">服务器推送：Comet</h1><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">1长轮询：页面js轮询服务器，实例：</p><p><span class=\\"cnblogs_code_copy\\" style=\\"padding-right: 5px; line-height: 1.5 !important;\\"><a title=\\"复制代码\\" style=\\"color: rgb(29, 88, 209); border: none !important;\\"><img src=\\"https://common.cnblogs.com/images/copycode.gif\\" alt=\\"复制代码\\"/></a></span></p><pre style=\\"margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-family: &#39;Courier New&#39; !important;\\">&nbsp;&nbsp;&nbsp;window.setInterval(function&nbsp;()&nbsp;{\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.get(&quot;${pageContext.request.contextPath}/communication/user/ajax.mvc&quot;,&nbsp;\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&quot;timed&quot;:&nbsp;new&nbsp;Date().getTime()},&nbsp;\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;(data)&nbsp;{\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#logs&quot;).append(&quot;[data:&nbsp;&quot;&nbsp;+&nbsp;data&nbsp;+&nbsp;&quot;&nbsp;]&lt;br/&gt;&quot;);\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;3000);</pre><p><span class=\\"cnblogs_code_copy\\" style=\\"padding-right: 5px; line-height: 1.5 !important;\\"><a title=\\"复制代码\\" style=\\"color: rgb(29, 88, 209); border: none !important;\\"><img src=\\"https://common.cnblogs.com/images/copycode.gif\\" alt=\\"复制代码\\"/></a></span></p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">&nbsp;</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">2。SSE是围绕只读Comet推出的API，只在简化HTTP流和长轮询代表的Comet的技术的使用</p><p style=\\"margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 25.2px; white-space: normal; background-color: rgb(255, 255, 255);\\">3. Web Sockets 使用了全新的Web Socket协议。一些聊天室使用这个。</p><p><br/></p>\',2,0,\'2018-08-31 20:31:27.232\',0,0) ' }
